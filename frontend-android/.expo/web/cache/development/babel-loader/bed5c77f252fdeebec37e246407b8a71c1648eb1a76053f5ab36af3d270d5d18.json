{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport { NavigationContainer, DefaultTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport HomeScreen from \"./src/screens/HomeScreen\";\nimport TaskSelectionScreen from \"./src/screens/TaskSelectionScreen\";\nimport TimerScreen from \"./src/screens/TimerScreen\";\nimport theme from \"./src/theme/theme\";\nimport CreateTaskScreen from \"./src/screens/CreateTaskScreen\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nLogBox.ignoreLogs(['Non-serializable values were found in the navigation state']);\nvar Stack = createStackNavigator();\nvar NavigationTheme = _objectSpread(_objectSpread({}, DefaultTheme), {}, {\n  dark: true,\n  colors: _objectSpread(_objectSpread({}, DefaultTheme.colors), {}, {\n    primary: theme.colors.primary,\n    background: theme.colors.background,\n    card: theme.colors.card,\n    text: theme.colors.text,\n    border: theme.colors.divider\n  })\n});\nvar App = function App() {\n  return _jsxs(NavigationContainer, {\n    theme: NavigationTheme,\n    children: [_jsx(StatusBar, {\n      barStyle: \"light-content\",\n      backgroundColor: theme.colors.background,\n      translucent: false\n    }), _jsxs(Stack.Navigator, {\n      initialRouteName: \"Home\",\n      screenOptions: {\n        headerShown: false,\n        cardStyle: {\n          backgroundColor: theme.colors.background\n        }\n      },\n      children: [_jsx(Stack.Screen, {\n        name: \"Home\",\n        component: HomeScreen\n      }), _jsx(Stack.Screen, {\n        name: \"TaskSelection\",\n        component: TaskSelectionScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Timer\",\n        component: TimerScreen\n      }), _jsx(Stack.Screen, {\n        name: \"CreateTask\",\n        component: CreateTaskScreen\n      })]\n    })]\n  });\n};\nexport default App;","map":{"version":3,"names":["React","StatusBar","LogBox","NavigationContainer","DefaultTheme","createStackNavigator","HomeScreen","TaskSelectionScreen","TimerScreen","theme","CreateTaskScreen","jsx","_jsx","jsxs","_jsxs","ignoreLogs","Stack","NavigationTheme","_objectSpread","dark","colors","primary","background","card","text","border","divider","App","children","barStyle","backgroundColor","translucent","Navigator","initialRouteName","screenOptions","headerShown","cardStyle","Screen","name","component"],"sources":["C:/Users/shikhar/Documents/Programming/Dev/Utility/frontend-android/App.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { StatusBar, LogBox } from 'react-native';\r\nimport { NavigationContainer, DefaultTheme } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport { RootStackParamList } from './src/types';\r\nimport HomeScreen from './src/screens/HomeScreen';\r\nimport TaskSelectionScreen from './src/screens/TaskSelectionScreen';\r\nimport TimerScreen from './src/screens/TimerScreen';\r\nimport theme from './src/theme/theme';\r\nimport CreateTaskScreen from './src/screens/CreateTaskScreen';\r\n\r\n// Ignore specific warnings that are not relevant or can't be fixed\r\nLogBox.ignoreLogs([\r\n  'Non-serializable values were found in the navigation state',\r\n]);\r\n\r\n// Create navigation stack\r\nconst Stack = createStackNavigator<RootStackParamList>();\r\n\r\n// Define navigation theme matching our app theme\r\nconst NavigationTheme = {\r\n  ...DefaultTheme,\r\n  dark: true,\r\n  colors: {\r\n    ...DefaultTheme.colors,\r\n    primary: theme.colors.primary,\r\n    background: theme.colors.background,\r\n    card: theme.colors.card,\r\n    text: theme.colors.text,\r\n    border: theme.colors.divider,\r\n  },\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <NavigationContainer theme={NavigationTheme}>\r\n      <StatusBar\r\n        barStyle=\"light-content\"\r\n        backgroundColor={theme.colors.background}\r\n        translucent={false}\r\n      />\r\n      \r\n      <Stack.Navigator\r\n        initialRouteName=\"Home\"\r\n        screenOptions={{\r\n          headerShown: false,\r\n          cardStyle: { backgroundColor: theme.colors.background },\r\n        }}\r\n      >\r\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\r\n        <Stack.Screen name=\"TaskSelection\" component={TaskSelectionScreen} />\r\n        <Stack.Screen name=\"Timer\" component={TimerScreen} />\r\n        <Stack.Screen name=\"CreateTask\" component={CreateTaskScreen} />\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n};\r\n\r\nexport default App; "],"mappings":";;;AAAA,OAAOA,KAAK,MAAqB,OAAO;AAAC,OAAAC,SAAA;AAAA,OAAAC,MAAA;AAEzC,SAASC,mBAAmB,EAAEC,YAAY,QAAQ,0BAA0B;AAC5E,SAASC,oBAAoB,QAAQ,yBAAyB;AAE9D,OAAOC,UAAU;AACjB,OAAOC,mBAAmB;AAC1B,OAAOC,WAAW;AAClB,OAAOC,KAAK;AACZ,OAAOC,gBAAgB;AAAuC,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAG9DZ,MAAM,CAACa,UAAU,CAAC,CAChB,4DAA4D,CAC7D,CAAC;AAGF,IAAMC,KAAK,GAAGX,oBAAoB,CAAqB,CAAC;AAGxD,IAAMY,eAAe,GAAAC,aAAA,CAAAA,aAAA,KAChBd,YAAY;EACfe,IAAI,EAAE,IAAI;EACVC,MAAM,EAAAF,aAAA,CAAAA,aAAA,KACDd,YAAY,CAACgB,MAAM;IACtBC,OAAO,EAAEZ,KAAK,CAACW,MAAM,CAACC,OAAO;IAC7BC,UAAU,EAAEb,KAAK,CAACW,MAAM,CAACE,UAAU;IACnCC,IAAI,EAAEd,KAAK,CAACW,MAAM,CAACG,IAAI;IACvBC,IAAI,EAAEf,KAAK,CAACW,MAAM,CAACI,IAAI;IACvBC,MAAM,EAAEhB,KAAK,CAACW,MAAM,CAACM;EAAO;AAC7B,EACF;AAED,IAAMC,GAAa,GAAG,SAAhBA,GAAaA,CAAA,EAAS;EAC1B,OACEb,KAAA,CAACX,mBAAmB;IAACM,KAAK,EAAEQ,eAAgB;IAAAW,QAAA,GAC1ChB,IAAA,CAACX,SAAS;MACR4B,QAAQ,EAAC,eAAe;MACxBC,eAAe,EAAErB,KAAK,CAACW,MAAM,CAACE,UAAW;MACzCS,WAAW,EAAE;IAAM,CACpB,CAAC,EAEFjB,KAAA,CAACE,KAAK,CAACgB,SAAS;MACdC,gBAAgB,EAAC,MAAM;MACvBC,aAAa,EAAE;QACbC,WAAW,EAAE,KAAK;QAClBC,SAAS,EAAE;UAAEN,eAAe,EAAErB,KAAK,CAACW,MAAM,CAACE;QAAW;MACxD,CAAE;MAAAM,QAAA,GAEFhB,IAAA,CAACI,KAAK,CAACqB,MAAM;QAACC,IAAI,EAAC,MAAM;QAACC,SAAS,EAAEjC;MAAW,CAAE,CAAC,EACnDM,IAAA,CAACI,KAAK,CAACqB,MAAM;QAACC,IAAI,EAAC,eAAe;QAACC,SAAS,EAAEhC;MAAoB,CAAE,CAAC,EACrEK,IAAA,CAACI,KAAK,CAACqB,MAAM;QAACC,IAAI,EAAC,OAAO;QAACC,SAAS,EAAE/B;MAAY,CAAE,CAAC,EACrDI,IAAA,CAACI,KAAK,CAACqB,MAAM;QAACC,IAAI,EAAC,YAAY;QAACC,SAAS,EAAE7B;MAAiB,CAAE,CAAC;IAAA,CAChD,CAAC;EAAA,CACC,CAAC;AAE1B,CAAC;AAED,eAAeiB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}