{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar lastSetBadgeCount = 0;\nvar badgeModule = {\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {},\n  getBadgeCountAsync: function () {\n    var _getBadgeCountAsync = _asyncToGenerator(function* () {\n      return lastSetBadgeCount;\n    });\n    function getBadgeCountAsync() {\n      return _getBadgeCountAsync.apply(this, arguments);\n    }\n    return getBadgeCountAsync;\n  }(),\n  setBadgeCountAsync: function () {\n    var _setBadgeCountAsync = _asyncToGenerator(function* (badgeCount, options) {\n      if (typeof window === 'undefined') {\n        return false;\n      }\n      var badgin = require('badgin');\n      if (badgeCount > 0) {\n        badgin.set(badgeCount, options);\n      } else {\n        badgin.clear();\n      }\n      lastSetBadgeCount = badgeCount;\n      return true;\n    });\n    function setBadgeCountAsync(_x, _x2) {\n      return _setBadgeCountAsync.apply(this, arguments);\n    }\n    return setBadgeCountAsync;\n  }()\n};\nexport default badgeModule;","map":{"version":3,"names":["lastSetBadgeCount","badgeModule","addListener","removeListeners","getBadgeCountAsync","_getBadgeCountAsync","_asyncToGenerator","apply","arguments","setBadgeCountAsync","_setBadgeCountAsync","badgeCount","options","window","badgin","require","set","clear","_x","_x2"],"sources":["C:\\Users\\shikhar\\Documents\\Programming\\Dev\\Utility\\frontend-android\\node_modules\\expo-notifications\\src\\BadgeModule.web.ts"],"sourcesContent":["import { BadgeModule } from './BadgeModule.types';\n\nlet lastSetBadgeCount = 0;\n\nconst badgeModule: BadgeModule = {\n  addListener: () => {},\n  removeListeners: () => {},\n  getBadgeCountAsync: async () => {\n    return lastSetBadgeCount;\n  },\n  setBadgeCountAsync: async (badgeCount, options) => {\n    // If this module is loaded in SSR (NextJS), we can't modify the badge.\n    // It also can't load the badgin module, that instantly invokes methods on window.\n    if (typeof window === 'undefined') {\n      return false;\n    }\n    const badgin = require('badgin');\n    if (badgeCount > 0) {\n      badgin.set(badgeCount, options);\n    } else {\n      badgin.clear();\n    }\n    lastSetBadgeCount = badgeCount;\n    return true;\n  },\n};\n\nexport default badgeModule;\n"],"mappings":";AAEA,IAAIA,iBAAiB,GAAG,CAAC;AAEzB,IAAMC,WAAW,GAAgB;EAC/BC,WAAW,EAAE,SAAbA,WAAWA,CAAA,EAAO,CAAE,CAAC;EACrBC,eAAe,EAAE,SAAjBA,eAAeA,CAAA,EAAO,CAAE,CAAC;EACzBC,kBAAkB;IAAA,IAAAC,mBAAA,GAAAC,iBAAA,CAAE,aAAW;MAC7B,OAAON,iBAAiB;IAC1B,CAAC;IAAA,SAFDI,kBAAkBA,CAAA;MAAA,OAAAC,mBAAA,CAAAE,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAlBJ,kBAAkB;EAAA,GAEjB;EACDK,kBAAkB;IAAA,IAAAC,mBAAA,GAAAJ,iBAAA,CAAE,WAAOK,UAAU,EAAEC,OAAO,EAAI;MAGhD,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;QACjC,OAAO,KAAK;;MAEd,IAAMC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;MAChC,IAAIJ,UAAU,GAAG,CAAC,EAAE;QAClBG,MAAM,CAACE,GAAG,CAACL,UAAU,EAAEC,OAAO,CAAC;OAChC,MAAM;QACLE,MAAM,CAACG,KAAK,EAAE;;MAEhBjB,iBAAiB,GAAGW,UAAU;MAC9B,OAAO,IAAI;IACb,CAAC;IAAA,SAdDF,kBAAkBA,CAAAS,EAAA,EAAAC,GAAA;MAAA,OAAAT,mBAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAlBC,kBAAkB;EAAA;CAenB;AAED,eAAeR,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}