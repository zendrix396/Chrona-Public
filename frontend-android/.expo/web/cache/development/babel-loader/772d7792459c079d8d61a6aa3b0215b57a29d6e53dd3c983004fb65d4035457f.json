{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as Application from 'expo-application';\nimport Constants from 'expo-constants';\nimport { Platform, CodedError, UnavailabilityError } from 'expo-modules-core';\nimport { setAutoServerRegistrationEnabledAsync } from \"./DevicePushTokenAutoRegistration.fx\";\nimport ServerRegistrationModule from \"./ServerRegistrationModule\";\nimport getDevicePushTokenAsync from \"./getDevicePushTokenAsync\";\nvar productionBaseUrl = 'https://exp.host/--/api/v2/';\nexport default function getExpoPushTokenAsync() {\n  return _getExpoPushTokenAsync.apply(this, arguments);\n}\nfunction _getExpoPushTokenAsync() {\n  _getExpoPushTokenAsync = _asyncToGenerator(function* () {\n    var _Constants$easConfig, _options$baseUrl, _options$url;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var devicePushToken = options.devicePushToken || (yield getDevicePushTokenAsync());\n    var deviceId = options.deviceId || (yield getDeviceIdAsync());\n    var projectId = options.projectId || ((_Constants$easConfig = Constants.easConfig) == null ? void 0 : _Constants$easConfig.projectId);\n    if (!projectId) {\n      console.warn('Calling getExpoPushTokenAsync without specifying a projectId is deprecated and will no longer be supported in SDK 49+');\n    }\n    if (!projectId) {\n      throw new CodedError('ERR_NOTIFICATIONS_NO_EXPERIENCE_ID', \"No 'projectId' found. If 'projectId' can't be inferred from the manifest (eg. in bare workflow), you have to pass it in yourself.\");\n    }\n    var applicationId = options.applicationId || Application.applicationId;\n    if (!applicationId) {\n      throw new CodedError('ERR_NOTIFICATIONS_NO_APPLICATION_ID', \"No applicationId found. If it can't be inferred from native configuration by expo-application, you have to pass it in yourself.\");\n    }\n    var type = options.type || getTypeOfToken(devicePushToken);\n    var development = options.development || (yield shouldUseDevelopmentNotificationService());\n    var baseUrl = (_options$baseUrl = options.baseUrl) != null ? _options$baseUrl : productionBaseUrl;\n    var url = (_options$url = options.url) != null ? _options$url : `${baseUrl}push/getExpoPushToken`;\n    var body = {\n      type: type,\n      deviceId: deviceId.toLowerCase(),\n      development: development,\n      appId: applicationId,\n      deviceToken: getDeviceToken(devicePushToken),\n      projectId: projectId\n    };\n    var response = yield fetch(url, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    }).catch(function (error) {\n      throw new CodedError('ERR_NOTIFICATIONS_NETWORK_ERROR', `Error encountered while fetching Expo token: ${error}.`);\n    });\n    if (!response.ok) {\n      var statusInfo = response.statusText || response.status;\n      var _body = undefined;\n      try {\n        _body = yield response.text();\n      } catch (_unused) {}\n      throw new CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', `Error encountered while fetching Expo token, expected an OK response, received: ${statusInfo} (body: \"${_body}\").`);\n    }\n    var expoPushToken = getExpoPushToken(yield parseResponse(response));\n    try {\n      if (options.url || options.baseUrl) {\n        console.debug(`[expo-notifications] Since the URL endpoint to register in has been customized in the options, expo-notifications won't try to auto-update the device push token on the server.`);\n      } else {\n        yield setAutoServerRegistrationEnabledAsync(true);\n      }\n    } catch (e) {\n      console.warn('[expo-notifications] Could not enable automatically registering new device tokens with the Expo notification service', e);\n    }\n    return {\n      type: 'expo',\n      data: expoPushToken\n    };\n  });\n  return _getExpoPushTokenAsync.apply(this, arguments);\n}\nfunction parseResponse(_x) {\n  return _parseResponse.apply(this, arguments);\n}\nfunction _parseResponse() {\n  _parseResponse = _asyncToGenerator(function* (response) {\n    try {\n      return yield response.json();\n    } catch (_unused2) {\n      try {\n        throw new CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', `Expected a JSON response from server when fetching Expo token, received body: ${JSON.stringify(yield response.text())}.`);\n      } catch (_unused3) {\n        throw new CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', `Expected a JSON response from server when fetching Expo token, received response: ${JSON.stringify(response)}.`);\n      }\n    }\n  });\n  return _parseResponse.apply(this, arguments);\n}\nfunction getExpoPushToken(data) {\n  if (!data || !(typeof data === 'object') || !data.data || !(typeof data.data === 'object') || !data.data.expoPushToken || !(typeof data.data.expoPushToken === 'string')) {\n    throw new CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', `Malformed response from server, expected \"{ data: { expoPushToken: string } }\", received: ${JSON.stringify(data, null, 2)}.`);\n  }\n  return data.data.expoPushToken;\n}\nfunction getDeviceIdAsync() {\n  return _getDeviceIdAsync.apply(this, arguments);\n}\nfunction _getDeviceIdAsync() {\n  _getDeviceIdAsync = _asyncToGenerator(function* () {\n    try {\n      if (!ServerRegistrationModule.getInstallationIdAsync) {\n        throw new UnavailabilityError('ExpoServerRegistrationModule', 'getInstallationIdAsync');\n      }\n      return yield ServerRegistrationModule.getInstallationIdAsync();\n    } catch (e) {\n      throw new CodedError('ERR_NOTIF_DEVICE_ID', `Could not have fetched installation ID of the application: ${e}.`);\n    }\n  });\n  return _getDeviceIdAsync.apply(this, arguments);\n}\nfunction getDeviceToken(devicePushToken) {\n  if (typeof devicePushToken.data === 'string') {\n    return devicePushToken.data;\n  }\n  return JSON.stringify(devicePushToken.data);\n}\nfunction shouldUseDevelopmentNotificationService() {\n  return _shouldUseDevelopmentNotificationService.apply(this, arguments);\n}\nfunction _shouldUseDevelopmentNotificationService() {\n  _shouldUseDevelopmentNotificationService = _asyncToGenerator(function* () {\n    if (Platform.OS === 'ios') {\n      try {\n        var notificationServiceEnvironment = yield Application.getIosPushNotificationServiceEnvironmentAsync();\n        if (notificationServiceEnvironment === 'development') {\n          return true;\n        }\n      } catch (_unused4) {}\n    }\n    return false;\n  });\n  return _shouldUseDevelopmentNotificationService.apply(this, arguments);\n}\nfunction getTypeOfToken(devicePushToken) {\n  switch (devicePushToken.type) {\n    case 'ios':\n      return 'apns';\n    case 'android':\n      return 'fcm';\n    default:\n      return devicePushToken.type;\n  }\n}","map":{"version":3,"names":["Application","Constants","Platform","CodedError","UnavailabilityError","setAutoServerRegistrationEnabledAsync","ServerRegistrationModule","getDevicePushTokenAsync","productionBaseUrl","getExpoPushTokenAsync","_getExpoPushTokenAsync","apply","arguments","_asyncToGenerator","_Constants$easConfig","_options$baseUrl","_options$url","options","length","undefined","devicePushToken","deviceId","getDeviceIdAsync","projectId","easConfig","console","warn","applicationId","type","getTypeOfToken","development","shouldUseDevelopmentNotificationService","baseUrl","url","body","toLowerCase","appId","deviceToken","getDeviceToken","response","fetch","method","headers","JSON","stringify","catch","error","ok","statusInfo","statusText","status","text","_unused","expoPushToken","getExpoPushToken","parseResponse","debug","e","data","_x","_parseResponse","json","_unused2","_unused3","_getDeviceIdAsync","getInstallationIdAsync","_shouldUseDevelopmentNotificationService","OS","notificationServiceEnvironment","getIosPushNotificationServiceEnvironmentAsync","_unused4"],"sources":["C:\\Users\\shikhar\\Documents\\Programming\\Dev\\Utility\\frontend-android\\node_modules\\expo-notifications\\src\\getExpoPushTokenAsync.ts"],"sourcesContent":["import * as Application from 'expo-application';\nimport Constants from 'expo-constants';\nimport { Platform, CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport { setAutoServerRegistrationEnabledAsync } from './DevicePushTokenAutoRegistration.fx';\nimport ServerRegistrationModule from './ServerRegistrationModule';\nimport { DevicePushToken, ExpoPushToken, ExpoPushTokenOptions } from './Tokens.types';\nimport getDevicePushTokenAsync from './getDevicePushTokenAsync';\n\nconst productionBaseUrl = 'https://exp.host/--/api/v2/';\n\n/**\n * Returns an Expo token that can be used to send a push notification to the device using Expo's push notifications service.\n *\n * This method makes requests to the Expo's servers. It can get rejected in cases where the request itself fails\n * (for example, due to the device being offline, experiencing a network timeout, or other HTTPS request failures).\n * To provide offline support to your users, you should `try/catch` this method and implement retry logic to attempt\n * to get the push token later, once the device is back online.\n *\n * > For Expo's backend to be able to send notifications to your app, you will need to provide it with push notification keys.\n * For more information, see [credentials](/push-notifications/push-notifications-setup/#get-credentials-for-development-builds) in the push notifications setup.\n *\n * @param options Object allowing you to pass in push notification configuration.\n * @return Returns a `Promise` that resolves to an object representing acquired push token.\n * @header fetch\n *\n * @example\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * export async function registerForPushNotificationsAsync(userId: string) {\n *   const expoPushToken = await Notifications.getExpoPushTokenAsync({\n *    projectId: 'your-project-id',\n *   });\n *\n *   await fetch('https://example.com/', {\n *     method: 'POST',\n *     headers: {\n *       'Content-Type': 'application/json',\n *     },\n *     body: JSON.stringify({\n *       userId,\n *       expoPushToken,\n *     }),\n *   });\n * }\n * ```\n */\nexport default async function getExpoPushTokenAsync(\n  options: ExpoPushTokenOptions = {}\n): Promise<ExpoPushToken> {\n  const devicePushToken = options.devicePushToken || (await getDevicePushTokenAsync());\n\n  const deviceId = options.deviceId || (await getDeviceIdAsync());\n  const projectId = options.projectId || Constants.easConfig?.projectId;\n\n  if (!projectId) {\n    console.warn(\n      'Calling getExpoPushTokenAsync without specifying a projectId is deprecated and will no longer be supported in SDK 49+'\n    );\n  }\n\n  if (!projectId) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_NO_EXPERIENCE_ID',\n      \"No 'projectId' found. If 'projectId' can't be inferred from the manifest (eg. in bare workflow), you have to pass it in yourself.\"\n    );\n  }\n\n  const applicationId = options.applicationId || Application.applicationId;\n  if (!applicationId) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_NO_APPLICATION_ID',\n      \"No applicationId found. If it can't be inferred from native configuration by expo-application, you have to pass it in yourself.\"\n    );\n  }\n  const type = options.type || getTypeOfToken(devicePushToken);\n  const development = options.development || (await shouldUseDevelopmentNotificationService());\n\n  const baseUrl = options.baseUrl ?? productionBaseUrl;\n  const url = options.url ?? `${baseUrl}push/getExpoPushToken`;\n\n  const body = {\n    type,\n    deviceId: deviceId.toLowerCase(),\n    development,\n    appId: applicationId,\n    deviceToken: getDeviceToken(devicePushToken),\n    projectId,\n  };\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify(body),\n  }).catch((error) => {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_NETWORK_ERROR',\n      `Error encountered while fetching Expo token: ${error}.`\n    );\n  });\n\n  if (!response.ok) {\n    const statusInfo = response.statusText || response.status;\n    let body: string | undefined = undefined;\n    try {\n      body = await response.text();\n    } catch {\n      // do nothing\n    }\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_SERVER_ERROR',\n      `Error encountered while fetching Expo token, expected an OK response, received: ${statusInfo} (body: \"${body}\").`\n    );\n  }\n\n  const expoPushToken = getExpoPushToken(await parseResponse(response));\n\n  try {\n    if (options.url || options.baseUrl) {\n      console.debug(\n        `[expo-notifications] Since the URL endpoint to register in has been customized in the options, expo-notifications won't try to auto-update the device push token on the server.`\n      );\n    } else {\n      await setAutoServerRegistrationEnabledAsync(true);\n    }\n  } catch (e) {\n    console.warn(\n      '[expo-notifications] Could not enable automatically registering new device tokens with the Expo notification service',\n      e\n    );\n  }\n\n  return {\n    type: 'expo',\n    data: expoPushToken,\n  };\n}\n\nasync function parseResponse(response: Response) {\n  try {\n    return await response.json();\n  } catch {\n    try {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_SERVER_ERROR',\n        `Expected a JSON response from server when fetching Expo token, received body: ${JSON.stringify(\n          await response.text()\n        )}.`\n      );\n    } catch {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_SERVER_ERROR',\n        `Expected a JSON response from server when fetching Expo token, received response: ${JSON.stringify(\n          response\n        )}.`\n      );\n    }\n  }\n}\n\nfunction getExpoPushToken(data: any) {\n  if (\n    !data ||\n    !(typeof data === 'object') ||\n    !data.data ||\n    !(typeof data.data === 'object') ||\n    !data.data.expoPushToken ||\n    !(typeof data.data.expoPushToken === 'string')\n  ) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_SERVER_ERROR',\n      `Malformed response from server, expected \"{ data: { expoPushToken: string } }\", received: ${JSON.stringify(\n        data,\n        null,\n        2\n      )}.`\n    );\n  }\n\n  return data.data.expoPushToken as string;\n}\n\n// Same as in DevicePushTokenAutoRegistration\nasync function getDeviceIdAsync() {\n  try {\n    if (!ServerRegistrationModule.getInstallationIdAsync) {\n      throw new UnavailabilityError('ExpoServerRegistrationModule', 'getInstallationIdAsync');\n    }\n\n    return await ServerRegistrationModule.getInstallationIdAsync();\n  } catch (e) {\n    throw new CodedError(\n      'ERR_NOTIF_DEVICE_ID',\n      `Could not have fetched installation ID of the application: ${e}.`\n    );\n  }\n}\n\nfunction getDeviceToken(devicePushToken: DevicePushToken) {\n  if (typeof devicePushToken.data === 'string') {\n    return devicePushToken.data;\n  }\n\n  return JSON.stringify(devicePushToken.data);\n}\n\n// Same as in DevicePushTokenAutoRegistration\nasync function shouldUseDevelopmentNotificationService() {\n  if (Platform.OS === 'ios') {\n    try {\n      const notificationServiceEnvironment =\n        await Application.getIosPushNotificationServiceEnvironmentAsync();\n      if (notificationServiceEnvironment === 'development') {\n        return true;\n      }\n    } catch {\n      // We can't do anything here, we'll fallback to false then.\n    }\n  }\n\n  return false;\n}\n\n// Same as in DevicePushTokenAutoRegistration\nfunction getTypeOfToken(devicePushToken: DevicePushToken) {\n  switch (devicePushToken.type) {\n    case 'ios':\n      return 'apns';\n    case 'android':\n      return 'fcm';\n    // This probably will error on server, but let's make this function future-safe.\n    default:\n      return devicePushToken.type;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}