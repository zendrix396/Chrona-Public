{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport { useNavigation } from '@react-navigation/native';\nimport Button from \"../components/Button\";\nimport theme from \"../theme/theme\";\nimport { TaskService } from \"../services/api\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar TaskSelectionScreen = function TaskSelectionScreen() {\n  var navigation = useNavigation();\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    tasks = _useState2[0],\n    setTasks = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    refreshing = _useState6[0],\n    setRefreshing = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    selectedTaskId = _useState8[0],\n    setSelectedTaskId = _useState8[1];\n  var _useState9 = useState('Loading tasks...'),\n    _useState10 = _slicedToArray(_useState9, 2),\n    loadingMessage = _useState10[0],\n    setLoadingMessage = _useState10[1];\n  useEffect(function () {\n    _fetchTasks();\n  }, []);\n  var _fetchTasks = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        setLoading(true);\n        setLoadingMessage('Connecting to server...');\n        setTimeout(function () {\n          if (loading) {\n            setLoadingMessage('Waking up the server...\\nThis may take up to 30 seconds if the server was asleep.');\n          }\n        }, 5000);\n        var fetchedTasks = yield TaskService.fetchTasks();\n        setTasks(fetchedTasks);\n      } catch (error) {\n        console.error('Error fetching tasks:', error);\n        Alert.alert('Connection Error', 'Failed to connect to the server. The server might be starting up or there may be network issues. Would you like to try again?', [{\n          text: 'Try Again',\n          onPress: function onPress() {\n            return _fetchTasks();\n          }\n        }, {\n          text: 'Cancel',\n          style: 'cancel'\n        }]);\n      } finally {\n        setLoading(false);\n        setRefreshing(false);\n        setLoadingMessage('Loading tasks...');\n      }\n    });\n    return function fetchTasks() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var handleRefresh = function handleRefresh() {\n    setRefreshing(true);\n    _fetchTasks();\n  };\n  var handleTaskSelect = function handleTaskSelect(task) {\n    setSelectedTaskId(task.id);\n  };\n  var handleStartTracking = function handleStartTracking() {\n    if (!selectedTaskId) {\n      Alert.alert('Selection Required', 'Please select a task to track');\n      return;\n    }\n    var selectedTask = tasks.find(function (task) {\n      return task.id === selectedTaskId;\n    });\n    if (selectedTask) {\n      navigation.navigate('Timer', {\n        taskId: selectedTask.id,\n        taskName: selectedTask.name\n      });\n    }\n  };\n  var handleCreateTask = function handleCreateTask() {\n    navigation.navigate('CreateTask');\n  };\n  var renderTaskItem = function renderTaskItem(_ref2) {\n    var item = _ref2.item;\n    return _jsxs(TouchableOpacity, {\n      style: [styles.taskItem, selectedTaskId === item.id && styles.taskItemSelected],\n      onPress: function onPress() {\n        return handleTaskSelect(item);\n      },\n      children: [_jsxs(View, {\n        style: styles.taskInfo,\n        children: [_jsx(Text, {\n          style: styles.taskName,\n          children: item.name\n        }), item.description && _jsx(Text, {\n          style: styles.taskDescription,\n          children: item.description\n        })]\n      }), selectedTaskId === item.id && _jsx(View, {\n        style: styles.checkmark,\n        children: _jsx(Text, {\n          style: styles.checkmarkText,\n          children: \"\\u2713\"\n        })\n      })]\n    });\n  };\n  var renderEmptyList = function renderEmptyList() {\n    return _jsxs(View, {\n      style: styles.emptyContainer,\n      children: [_jsx(Text, {\n        style: styles.emptyText,\n        children: \"No tasks found\"\n      }), _jsx(Text, {\n        style: styles.emptySubtext,\n        children: \"Create a task to start tracking time\"\n      }), _jsx(Button, {\n        title: \"Create Task\",\n        onPress: handleCreateTask,\n        variant: \"primary\",\n        style: styles.emptyButton\n      })]\n    });\n  };\n  if (loading && !refreshing) {\n    return _jsxs(View, {\n      style: styles.loadingContainer,\n      children: [_jsx(ActivityIndicator, {\n        size: \"large\",\n        color: theme.colors.primary\n      }), _jsx(Text, {\n        style: styles.loadingText,\n        children: loadingMessage\n      }), loadingMessage.includes('Waking up') && _jsx(Text, {\n        style: styles.loadingSubtext,\n        children: \"Free tier services go to sleep after inactivity\"\n      })]\n    });\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.header,\n      children: _jsx(Text, {\n        style: styles.title,\n        children: \"Select Task\"\n      })\n    }), _jsx(FlatList, {\n      data: tasks,\n      renderItem: renderTaskItem,\n      keyExtractor: function keyExtractor(item) {\n        return item.id.toString();\n      },\n      contentContainerStyle: styles.listContainer,\n      ListEmptyComponent: renderEmptyList,\n      refreshControl: _jsx(RefreshControl, {\n        refreshing: refreshing,\n        onRefresh: handleRefresh,\n        colors: [theme.colors.primary],\n        progressBackgroundColor: theme.colors.card,\n        tintColor: theme.colors.primary\n      })\n    }), _jsxs(View, {\n      style: styles.buttonContainer,\n      children: [_jsx(Button, {\n        title: \"Create New Task\",\n        onPress: handleCreateTask,\n        variant: \"outline\",\n        style: styles.button\n      }), _jsx(Button, {\n        title: \"Start Tracking\",\n        onPress: handleStartTracking,\n        variant: \"primary\",\n        disabled: !selectedTaskId,\n        style: styles.button\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.colors.background\n  },\n  header: {\n    padding: theme.spacing.lg,\n    borderBottomWidth: 1,\n    borderBottomColor: theme.colors.divider\n  },\n  title: {\n    fontSize: theme.typography.fontSizes.xl,\n    fontWeight: theme.typography.fontWeights.bold,\n    color: theme.colors.text\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: theme.colors.background,\n    padding: theme.spacing.lg\n  },\n  loadingText: {\n    marginTop: theme.spacing.md,\n    color: theme.colors.text,\n    fontSize: theme.typography.fontSizes.md,\n    textAlign: 'center'\n  },\n  loadingSubtext: {\n    marginTop: theme.spacing.sm,\n    color: theme.colors.secondaryText,\n    fontSize: theme.typography.fontSizes.sm,\n    textAlign: 'center'\n  },\n  listContainer: {\n    flexGrow: 1,\n    padding: theme.spacing.md\n  },\n  taskItem: _objectSpread({\n    flexDirection: 'row',\n    padding: theme.spacing.md,\n    backgroundColor: theme.colors.card,\n    borderRadius: theme.radius.md,\n    marginBottom: theme.spacing.md\n  }, theme.shadows.sm),\n  taskItemSelected: {\n    backgroundColor: theme.colors.surface,\n    borderWidth: 1,\n    borderColor: theme.colors.primary\n  },\n  taskInfo: {\n    flex: 1\n  },\n  taskName: {\n    fontSize: theme.typography.fontSizes.md,\n    fontWeight: theme.typography.fontWeights.semibold,\n    color: theme.colors.text,\n    marginBottom: 4\n  },\n  taskDescription: {\n    fontSize: theme.typography.fontSizes.sm,\n    color: theme.colors.secondaryText\n  },\n  checkmark: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n    backgroundColor: theme.colors.primary\n  },\n  checkmarkText: {\n    color: theme.colors.background,\n    fontSize: theme.typography.fontSizes.sm,\n    fontWeight: theme.typography.fontWeights.bold\n  },\n  buttonContainer: {\n    padding: theme.spacing.lg,\n    borderTopWidth: 1,\n    borderTopColor: theme.colors.divider\n  },\n  button: {\n    marginVertical: theme.spacing.xs\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: theme.spacing.xl\n  },\n  emptyText: {\n    fontSize: theme.typography.fontSizes.lg,\n    fontWeight: theme.typography.fontWeights.medium,\n    color: theme.colors.text,\n    marginBottom: theme.spacing.sm\n  },\n  emptySubtext: {\n    fontSize: theme.typography.fontSizes.md,\n    color: theme.colors.secondaryText,\n    textAlign: 'center',\n    marginBottom: theme.spacing.lg\n  },\n  emptyButton: {\n    marginTop: theme.spacing.md\n  }\n});\nexport default TaskSelectionScreen;","map":{"version":3,"names":["React","useEffect","useState","View","Text","StyleSheet","FlatList","TouchableOpacity","ActivityIndicator","Alert","RefreshControl","useNavigation","Button","theme","TaskService","jsx","_jsx","jsxs","_jsxs","TaskSelectionScreen","navigation","_useState","_useState2","_slicedToArray","tasks","setTasks","_useState3","_useState4","loading","setLoading","_useState5","_useState6","refreshing","setRefreshing","_useState7","_useState8","selectedTaskId","setSelectedTaskId","_useState9","_useState10","loadingMessage","setLoadingMessage","fetchTasks","_ref","_asyncToGenerator","setTimeout","fetchedTasks","error","console","alert","text","onPress","style","apply","arguments","handleRefresh","handleTaskSelect","task","id","handleStartTracking","selectedTask","find","navigate","taskId","taskName","name","handleCreateTask","renderTaskItem","_ref2","item","styles","taskItem","taskItemSelected","children","taskInfo","description","taskDescription","checkmark","checkmarkText","renderEmptyList","emptyContainer","emptyText","emptySubtext","title","variant","emptyButton","loadingContainer","size","color","colors","primary","loadingText","includes","loadingSubtext","container","header","data","renderItem","keyExtractor","toString","contentContainerStyle","listContainer","ListEmptyComponent","refreshControl","onRefresh","progressBackgroundColor","card","tintColor","buttonContainer","button","disabled","create","flex","backgroundColor","background","padding","spacing","lg","borderBottomWidth","borderBottomColor","divider","fontSize","typography","fontSizes","xl","fontWeight","fontWeights","bold","justifyContent","alignItems","marginTop","md","textAlign","sm","secondaryText","flexGrow","_objectSpread","flexDirection","borderRadius","radius","marginBottom","shadows","surface","borderWidth","borderColor","semibold","width","height","borderTopWidth","borderTopColor","marginVertical","xs","medium"],"sources":["C:/Users/shikhar/Documents/Programming/Dev/Utility/frontend-android/src/screens/TaskSelectionScreen.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { \r\n  View, \r\n  Text, \r\n  StyleSheet, \r\n  FlatList, \r\n  TouchableOpacity, \r\n  ActivityIndicator,\r\n  Alert,\r\n  RefreshControl\r\n} from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { StackNavigationProp } from '@react-navigation/stack';\r\nimport { RootStackParamList, Task } from '../types';\r\nimport Button from '../components/Button';\r\nimport theme from '../theme/theme';\r\nimport { TaskService } from '../services/api';\r\n\r\ntype TaskSelectionScreenNavigationProp = StackNavigationProp<RootStackParamList, 'TaskSelection'>;\r\n\r\nconst TaskSelectionScreen: React.FC = () => {\r\n  const navigation = useNavigation<TaskSelectionScreenNavigationProp>();\r\n  const [tasks, setTasks] = useState<Task[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [refreshing, setRefreshing] = useState<boolean>(false);\r\n  const [selectedTaskId, setSelectedTaskId] = useState<number | null>(null);\r\n  const [loadingMessage, setLoadingMessage] = useState<string>('Loading tasks...');\r\n\r\n  useEffect(() => {\r\n    fetchTasks();\r\n  }, []);\r\n\r\n  const fetchTasks = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setLoadingMessage('Connecting to server...');\r\n      \r\n      // If using a free tier service like Render, add note about possible delay\r\n      setTimeout(() => {\r\n        if (loading) {\r\n          setLoadingMessage('Waking up the server...\\nThis may take up to 30 seconds if the server was asleep.');\r\n        }\r\n      }, 5000);\r\n      \r\n      const fetchedTasks = await TaskService.fetchTasks();\r\n      setTasks(fetchedTasks);\r\n    } catch (error) {\r\n      console.error('Error fetching tasks:', error);\r\n      Alert.alert(\r\n        'Connection Error', \r\n        'Failed to connect to the server. The server might be starting up or there may be network issues. Would you like to try again?',\r\n        [\r\n          {\r\n            text: 'Try Again',\r\n            onPress: () => fetchTasks()\r\n          },\r\n          {\r\n            text: 'Cancel',\r\n            style: 'cancel'\r\n          }\r\n        ]\r\n      );\r\n    } finally {\r\n      setLoading(false);\r\n      setRefreshing(false);\r\n      setLoadingMessage('Loading tasks...');\r\n    }\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    setRefreshing(true);\r\n    fetchTasks();\r\n  };\r\n\r\n  const handleTaskSelect = (task: Task) => {\r\n    setSelectedTaskId(task.id);\r\n  };\r\n\r\n  const handleStartTracking = () => {\r\n    if (!selectedTaskId) {\r\n      Alert.alert('Selection Required', 'Please select a task to track');\r\n      return;\r\n    }\r\n\r\n    const selectedTask = tasks.find(task => task.id === selectedTaskId);\r\n    if (selectedTask) {\r\n      navigation.navigate('Timer', { taskId: selectedTask.id, taskName: selectedTask.name });\r\n    }\r\n  };\r\n\r\n  const handleCreateTask = () => {\r\n    navigation.navigate('CreateTask');\r\n  };\r\n\r\n  const renderTaskItem = ({ item }: { item: Task }) => (\r\n    <TouchableOpacity\r\n      style={[\r\n        styles.taskItem,\r\n        selectedTaskId === item.id && styles.taskItemSelected\r\n      ]}\r\n      onPress={() => handleTaskSelect(item)}\r\n    >\r\n      <View style={styles.taskInfo}>\r\n        <Text style={styles.taskName}>{item.name}</Text>\r\n        {item.description && (\r\n          <Text style={styles.taskDescription}>{item.description}</Text>\r\n        )}\r\n      </View>\r\n      {selectedTaskId === item.id && (\r\n        <View style={styles.checkmark}>\r\n          <Text style={styles.checkmarkText}>✓</Text>\r\n        </View>\r\n      )}\r\n    </TouchableOpacity>\r\n  );\r\n\r\n  const renderEmptyList = () => (\r\n    <View style={styles.emptyContainer}>\r\n      <Text style={styles.emptyText}>No tasks found</Text>\r\n      <Text style={styles.emptySubtext}>Create a task to start tracking time</Text>\r\n      <Button\r\n        title=\"Create Task\"\r\n        onPress={handleCreateTask}\r\n        variant=\"primary\"\r\n        style={styles.emptyButton}\r\n      />\r\n    </View>\r\n  );\r\n\r\n  if (loading && !refreshing) {\r\n    return (\r\n      <View style={styles.loadingContainer}>\r\n        <ActivityIndicator size=\"large\" color={theme.colors.primary} />\r\n        <Text style={styles.loadingText}>{loadingMessage}</Text>\r\n        {loadingMessage.includes('Waking up') && (\r\n          <Text style={styles.loadingSubtext}>\r\n            Free tier services go to sleep after inactivity\r\n          </Text>\r\n        )}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.header}>\r\n        <Text style={styles.title}>Select Task</Text>\r\n      </View>\r\n\r\n      <FlatList\r\n        data={tasks}\r\n        renderItem={renderTaskItem}\r\n        keyExtractor={item => item.id.toString()}\r\n        contentContainerStyle={styles.listContainer}\r\n        ListEmptyComponent={renderEmptyList}\r\n        refreshControl={\r\n          <RefreshControl\r\n            refreshing={refreshing}\r\n            onRefresh={handleRefresh}\r\n            colors={[theme.colors.primary]}\r\n            progressBackgroundColor={theme.colors.card}\r\n            tintColor={theme.colors.primary}\r\n          />\r\n        }\r\n      />\r\n\r\n      <View style={styles.buttonContainer}>\r\n        <Button\r\n          title=\"Create New Task\"\r\n          onPress={handleCreateTask}\r\n          variant=\"outline\"\r\n          style={styles.button}\r\n        />\r\n        <Button\r\n          title=\"Start Tracking\"\r\n          onPress={handleStartTracking}\r\n          variant=\"primary\"\r\n          disabled={!selectedTaskId}\r\n          style={styles.button}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: theme.colors.background,\r\n  },\r\n  header: {\r\n    padding: theme.spacing.lg,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: theme.colors.divider,\r\n  },\r\n  title: {\r\n    fontSize: theme.typography.fontSizes.xl,\r\n    fontWeight: theme.typography.fontWeights.bold as any,\r\n    color: theme.colors.text,\r\n  },\r\n  loadingContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: theme.colors.background,\r\n    padding: theme.spacing.lg,\r\n  },\r\n  loadingText: {\r\n    marginTop: theme.spacing.md,\r\n    color: theme.colors.text,\r\n    fontSize: theme.typography.fontSizes.md,\r\n    textAlign: 'center',\r\n  },\r\n  loadingSubtext: {\r\n    marginTop: theme.spacing.sm,\r\n    color: theme.colors.secondaryText,\r\n    fontSize: theme.typography.fontSizes.sm,\r\n    textAlign: 'center',\r\n  },\r\n  listContainer: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing.md,\r\n  },\r\n  taskItem: {\r\n    flexDirection: 'row',\r\n    padding: theme.spacing.md,\r\n    backgroundColor: theme.colors.card,\r\n    borderRadius: theme.radius.md,\r\n    marginBottom: theme.spacing.md,\r\n    ...theme.shadows.sm,\r\n  },\r\n  taskItemSelected: {\r\n    backgroundColor: theme.colors.surface,\r\n    borderWidth: 1,\r\n    borderColor: theme.colors.primary,\r\n  },\r\n  taskInfo: {\r\n    flex: 1,\r\n  },\r\n  taskName: {\r\n    fontSize: theme.typography.fontSizes.md,\r\n    fontWeight: theme.typography.fontWeights.semibold as any,\r\n    color: theme.colors.text,\r\n    marginBottom: 4,\r\n  },\r\n  taskDescription: {\r\n    fontSize: theme.typography.fontSizes.sm,\r\n    color: theme.colors.secondaryText,\r\n  },\r\n  checkmark: {\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    width: 24,\r\n    height: 24,\r\n    borderRadius: 12,\r\n    backgroundColor: theme.colors.primary,\r\n  },\r\n  checkmarkText: {\r\n    color: theme.colors.background,\r\n    fontSize: theme.typography.fontSizes.sm,\r\n    fontWeight: theme.typography.fontWeights.bold as any,\r\n  },\r\n  buttonContainer: {\r\n    padding: theme.spacing.lg,\r\n    borderTopWidth: 1,\r\n    borderTopColor: theme.colors.divider,\r\n  },\r\n  button: {\r\n    marginVertical: theme.spacing.xs,\r\n  },\r\n  emptyContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: theme.spacing.xl,\r\n  },\r\n  emptyText: {\r\n    fontSize: theme.typography.fontSizes.lg,\r\n    fontWeight: theme.typography.fontWeights.medium as any,\r\n    color: theme.colors.text,\r\n    marginBottom: theme.spacing.sm,\r\n  },\r\n  emptySubtext: {\r\n    fontSize: theme.typography.fontSizes.md,\r\n    color: theme.colors.secondaryText,\r\n    textAlign: 'center',\r\n    marginBottom: theme.spacing.lg,\r\n  },\r\n  emptyButton: {\r\n    marginTop: theme.spacing.md,\r\n  },\r\n});\r\n\r\nexport default TaskSelectionScreen; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}