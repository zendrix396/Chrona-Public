{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport NotificationScheduler from \"./NotificationScheduler\";\nexport default function cancelScheduledNotificationAsync(_x) {\n  return _cancelScheduledNotificationAsync.apply(this, arguments);\n}\nfunction _cancelScheduledNotificationAsync() {\n  _cancelScheduledNotificationAsync = _asyncToGenerator(function* (identifier) {\n    if (!NotificationScheduler.cancelScheduledNotificationAsync) {\n      throw new UnavailabilityError('Notifications', 'cancelScheduledNotificationAsync');\n    }\n    return yield NotificationScheduler.cancelScheduledNotificationAsync(identifier);\n  });\n  return _cancelScheduledNotificationAsync.apply(this, arguments);\n}","map":{"version":3,"names":["UnavailabilityError","NotificationScheduler","cancelScheduledNotificationAsync","_x","_cancelScheduledNotificationAsync","apply","arguments","_asyncToGenerator","identifier"],"sources":["C:\\Users\\shikhar\\Documents\\Programming\\Dev\\Utility\\frontend-android\\node_modules\\expo-notifications\\src\\cancelScheduledNotificationAsync.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport NotificationScheduler from './NotificationScheduler';\n\n/**\n * Cancels a single scheduled notification. The scheduled notification of given ID will not trigger.\n * @param identifier The notification identifier with which `scheduleNotificationAsync` method resolved when the notification has been scheduled.\n * @return A Promise resolves once the scheduled notification is successfully canceled or if there is no scheduled notification for a given identifier.\n * @example Schedule and then cancel the notification:\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * async function scheduleAndCancel() {\n *   const identifier = await Notifications.scheduleNotificationAsync({\n *     content: {\n *       title: 'Hey!',\n *     },\n *     trigger: { seconds: 60, repeats: true },\n *   });\n *   await Notifications.cancelScheduledNotificationAsync(identifier);\n * }\n * ```\n * @header schedule\n */\nexport default async function cancelScheduledNotificationAsync(identifier: string): Promise<void> {\n  if (!NotificationScheduler.cancelScheduledNotificationAsync) {\n    throw new UnavailabilityError('Notifications', 'cancelScheduledNotificationAsync');\n  }\n\n  return await NotificationScheduler.cancelScheduledNotificationAsync(identifier);\n}\n"],"mappings":";AAAA,SAASA,mBAAmB,QAAQ,mBAAmB;AAEvD,OAAOC,qBAAqB;AAsB5B,wBAA8BC,gCAAgCA,CAAAC,EAAA;EAAA,OAAAC,iCAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAM7D,SAAAF,kCAAA;EAAAA,iCAAA,GAAAG,iBAAA,CANc,WAAgDC,UAAkB;IAC/E,IAAI,CAACP,qBAAqB,CAACC,gCAAgC,EAAE;MAC3D,MAAM,IAAIF,mBAAmB,CAAC,eAAe,EAAE,kCAAkC,CAAC;;IAGpF,aAAaC,qBAAqB,CAACC,gCAAgC,CAACM,UAAU,CAAC;EACjF,CAAC;EAAA,OAAAJ,iCAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}