{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useNavigation } from '@react-navigation/native';\nimport Button from \"../components/Button\";\nimport theme from \"../theme/theme\";\nimport { TimeEntryService } from \"../services/api\";\nimport NotificationService from \"../services/NotificationService\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar HomeScreen = function HomeScreen() {\n  var navigation = useNavigation();\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    loading = _useState2[0],\n    setLoading = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    resumingSession = _useState4[0],\n    setResumingSession = _useState4[1];\n  useEffect(function () {\n    NotificationService.requestPermissions();\n    checkForRunningTimer();\n  }, []);\n  var checkForRunningTimer = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        setLoading(true);\n        var timerState = yield TimeEntryService.checkForRunningTimer();\n        if (timerState.isRunning && timerState.taskId && timerState.startTime) {\n          setResumingSession(true);\n          Alert.alert('Timer In Progress', 'You have a tracking session in progress. Do you want to resume it?', [{\n            text: 'Resume',\n            onPress: function onPress() {\n              fetchTaskAndNavigate(timerState.taskId, timerState.entryId, timerState.startTime);\n            }\n          }, {\n            text: 'Stop',\n            style: 'cancel',\n            onPress: function () {\n              var _onPress = _asyncToGenerator(function* () {\n                if (timerState.entryId) {\n                  try {\n                    var startTime = timerState.startTime;\n                    var now = new Date();\n                    var durationMinutes = (now.getTime() - startTime.getTime()) / 60000;\n                    yield TimeEntryService.updateTimeEntry(timerState.entryId, durationMinutes);\n                    setResumingSession(false);\n                  } catch (error) {\n                    console.error('Error stopping timer:', error);\n                  }\n                }\n              });\n              function onPress() {\n                return _onPress.apply(this, arguments);\n              }\n              return onPress;\n            }()\n          }], {\n            cancelable: false\n          });\n        }\n      } catch (error) {\n        console.error('Error checking for running timer:', error);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function checkForRunningTimer() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var fetchTaskAndNavigate = function () {\n    var _ref2 = _asyncToGenerator(function* (taskId, entryId, startTime) {\n      try {\n        navigation.navigate('Timer', {\n          taskId: taskId,\n          taskName: 'Current Task'\n        });\n      } catch (error) {\n        console.error('Error fetching task:', error);\n        Alert.alert('Error', 'Could not resume timer session');\n      }\n    });\n    return function fetchTaskAndNavigate(_x, _x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(StatusBar, {\n      barStyle: \"light-content\",\n      backgroundColor: theme.colors.background\n    }), _jsxs(View, {\n      style: styles.header,\n      children: [_jsx(Text, {\n        style: styles.title,\n        children: \"Chrona\"\n      }), _jsx(Text, {\n        style: styles.subtitle,\n        children: \"Time Tracker\"\n      })]\n    }), _jsx(View, {\n      style: styles.logoContainer,\n      children: _jsx(Image, {\n        source: require(\"../assets/icon.png\"),\n        style: styles.logo,\n        defaultSource: {\n          uri: 'https://via.placeholder.com/200'\n        }\n      })\n    }), _jsxs(View, {\n      style: styles.buttonContainer,\n      children: [_jsx(Button, {\n        title: \"Start Tracking\",\n        onPress: function onPress() {\n          return navigation.navigate('TaskSelection');\n        },\n        variant: \"primary\",\n        size: \"large\",\n        disabled: loading || resumingSession,\n        loading: loading,\n        style: styles.button\n      }), _jsx(Button, {\n        title: \"View History\",\n        onPress: function onPress() {\n          return Alert.alert('Coming Soon', 'This feature is under development.');\n        },\n        variant: \"outline\",\n        size: \"large\",\n        disabled: loading || resumingSession,\n        style: styles.button\n      })]\n    }), _jsx(TouchableOpacity, {\n      style: styles.footer,\n      onPress: function onPress() {\n        return Alert.alert('About', 'Chrona Time Tracker\\nVersion 1.0.0');\n      },\n      children: _jsx(Text, {\n        style: styles.footerText,\n        children: \"\\xA9 2025 Chrona\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.colors.background,\n    padding: theme.spacing.lg\n  },\n  header: {\n    marginTop: theme.spacing.xl,\n    alignItems: 'center'\n  },\n  title: {\n    fontSize: theme.typography.fontSizes.xxxl,\n    fontWeight: theme.typography.fontWeights.bold,\n    color: theme.colors.primary,\n    textShadowColor: 'rgba(0, 230, 118, 0.3)',\n    textShadowOffset: {\n      width: 0,\n      height: 0\n    },\n    textShadowRadius: 10\n  },\n  subtitle: {\n    fontSize: theme.typography.fontSizes.lg,\n    color: theme.colors.secondaryText,\n    marginTop: theme.spacing.xs\n  },\n  logoContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  logo: {\n    width: 200,\n    height: 200,\n    resizeMode: 'contain'\n  },\n  buttonContainer: {\n    marginBottom: theme.spacing.xl\n  },\n  button: {\n    marginVertical: theme.spacing.sm,\n    width: '100%'\n  },\n  footer: {\n    alignItems: 'center',\n    marginBottom: theme.spacing.sm\n  },\n  footerText: {\n    color: theme.colors.secondaryText,\n    fontSize: theme.typography.fontSizes.sm\n  }\n});\nexport default HomeScreen;","map":{"version":3,"names":["React","useEffect","useState","View","Text","StyleSheet","TouchableOpacity","Image","StatusBar","Alert","useNavigation","Button","theme","TimeEntryService","NotificationService","jsx","_jsx","jsxs","_jsxs","HomeScreen","navigation","_useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","resumingSession","setResumingSession","requestPermissions","checkForRunningTimer","_ref","_asyncToGenerator","timerState","isRunning","taskId","startTime","alert","text","onPress","fetchTaskAndNavigate","entryId","style","_onPress","now","Date","durationMinutes","getTime","updateTimeEntry","error","console","apply","arguments","cancelable","_ref2","navigate","taskName","_x","_x2","_x3","styles","container","children","barStyle","backgroundColor","colors","background","header","title","subtitle","logoContainer","source","require","logo","defaultSource","uri","buttonContainer","variant","size","disabled","button","footer","footerText","create","flex","padding","spacing","lg","marginTop","xl","alignItems","fontSize","typography","fontSizes","xxxl","fontWeight","fontWeights","bold","color","primary","textShadowColor","textShadowOffset","width","height","textShadowRadius","secondaryText","xs","justifyContent","resizeMode","marginBottom","marginVertical","sm"],"sources":["C:/Users/shikhar/Documents/Programming/Dev/Utility/frontend-android/src/screens/HomeScreen.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { \r\n  View, \r\n  Text, \r\n  StyleSheet, \r\n  TouchableOpacity, \r\n  Image, \r\n  StatusBar,\r\n  Alert\r\n} from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { StackNavigationProp } from '@react-navigation/stack';\r\nimport { RootStackParamList } from '../types';\r\nimport Button from '../components/Button';\r\nimport theme from '../theme/theme';\r\nimport { TimeEntryService } from '../services/api';\r\nimport NotificationService from '../services/NotificationService';\r\n\r\ntype HomeScreenNavigationProp = StackNavigationProp<RootStackParamList, 'Home'>;\r\n\r\nconst HomeScreen: React.FC = () => {\r\n  const navigation = useNavigation<HomeScreenNavigationProp>();\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [resumingSession, setResumingSession] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    // Request notification permissions\r\n    NotificationService.requestPermissions();\r\n    \r\n    // Check if we have a running timer\r\n    checkForRunningTimer();\r\n  }, []);\r\n\r\n  const checkForRunningTimer = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const timerState = await TimeEntryService.checkForRunningTimer();\r\n      \r\n      if (timerState.isRunning && timerState.taskId && timerState.startTime) {\r\n        setResumingSession(true);\r\n        // Prompt user if they want to resume the session\r\n        Alert.alert(\r\n          'Timer In Progress',\r\n          'You have a tracking session in progress. Do you want to resume it?',\r\n          [\r\n            {\r\n              text: 'Resume',\r\n              onPress: () => {\r\n                // Find task name\r\n                fetchTaskAndNavigate(timerState.taskId!, timerState.entryId!, timerState.startTime!);\r\n              },\r\n            },\r\n            {\r\n              text: 'Stop',\r\n              style: 'cancel',\r\n              onPress: async () => {\r\n                if (timerState.entryId) {\r\n                  try {\r\n                    // Calculate duration in minutes\r\n                    const startTime = timerState.startTime!;\r\n                    const now = new Date();\r\n                    const durationMinutes = (now.getTime() - startTime.getTime()) / 60000;\r\n                    \r\n                    await TimeEntryService.updateTimeEntry(timerState.entryId, durationMinutes);\r\n                    setResumingSession(false);\r\n                  } catch (error) {\r\n                    console.error('Error stopping timer:', error);\r\n                  }\r\n                }\r\n              },\r\n            },\r\n          ],\r\n          { cancelable: false }\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking for running timer:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchTaskAndNavigate = async (taskId: number, entryId: number, startTime: Date) => {\r\n    try {\r\n      // For simplicity, we'll just pass the taskId and use a placeholder name\r\n      // In a real app, you would fetch the task details first\r\n      navigation.navigate('Timer', { \r\n        taskId,\r\n        taskName: 'Current Task' // Placeholder, should be fetched from API\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching task:', error);\r\n      Alert.alert('Error', 'Could not resume timer session');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <StatusBar barStyle=\"light-content\" backgroundColor={theme.colors.background} />\r\n      \r\n      <View style={styles.header}>\r\n        <Text style={styles.title}>Chrona</Text>\r\n        <Text style={styles.subtitle}>Time Tracker</Text>\r\n      </View>\r\n      \r\n      <View style={styles.logoContainer}>\r\n        <Image \r\n          source={require('../assets/icon.png')} \r\n          style={styles.logo}\r\n          // Placeholder until actual icon is created\r\n          defaultSource={{ uri: 'https://via.placeholder.com/200' }}\r\n        />\r\n      </View>\r\n      \r\n      <View style={styles.buttonContainer}>\r\n        <Button\r\n          title=\"Start Tracking\"\r\n          onPress={() => navigation.navigate('TaskSelection')}\r\n          variant=\"primary\"\r\n          size=\"large\"\r\n          disabled={loading || resumingSession}\r\n          loading={loading}\r\n          style={styles.button}\r\n        />\r\n        \r\n        <Button\r\n          title=\"View History\"\r\n          onPress={() => Alert.alert('Coming Soon', 'This feature is under development.')}\r\n          variant=\"outline\"\r\n          size=\"large\"\r\n          disabled={loading || resumingSession}\r\n          style={styles.button}\r\n        />\r\n      </View>\r\n      \r\n      <TouchableOpacity \r\n        style={styles.footer}\r\n        onPress={() => Alert.alert('About', 'Chrona Time Tracker\\nVersion 1.0.0')}\r\n      >\r\n        <Text style={styles.footerText}>© 2025 Chrona</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: theme.colors.background,\r\n    padding: theme.spacing.lg,\r\n  },\r\n  header: {\r\n    marginTop: theme.spacing.xl,\r\n    alignItems: 'center',\r\n  },\r\n  title: {\r\n    fontSize: theme.typography.fontSizes.xxxl,\r\n    fontWeight: theme.typography.fontWeights.bold as any,\r\n    color: theme.colors.primary,\r\n    textShadowColor: 'rgba(0, 230, 118, 0.3)',\r\n    textShadowOffset: { width: 0, height: 0 },\r\n    textShadowRadius: 10,\r\n  },\r\n  subtitle: {\r\n    fontSize: theme.typography.fontSizes.lg,\r\n    color: theme.colors.secondaryText,\r\n    marginTop: theme.spacing.xs,\r\n  },\r\n  logoContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  logo: {\r\n    width: 200,\r\n    height: 200,\r\n    resizeMode: 'contain',\r\n  },\r\n  buttonContainer: {\r\n    marginBottom: theme.spacing.xl,\r\n  },\r\n  button: {\r\n    marginVertical: theme.spacing.sm,\r\n    width: '100%',\r\n  },\r\n  footer: {\r\n    alignItems: 'center',\r\n    marginBottom: theme.spacing.sm,\r\n  },\r\n  footerText: {\r\n    color: theme.colors.secondaryText,\r\n    fontSize: theme.typography.fontSizes.sm,\r\n  },\r\n});\r\n\r\nexport default HomeScreen; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}