{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as Notifications from 'expo-notifications';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nNotifications.setNotificationHandler({\n  handleNotification: function () {\n    var _handleNotification = _asyncToGenerator(function* () {\n      return {\n        shouldShowAlert: true,\n        shouldPlaySound: false,\n        shouldSetBadge: false\n      };\n    });\n    function handleNotification() {\n      return _handleNotification.apply(this, arguments);\n    }\n    return handleNotification;\n  }()\n});\nvar NotificationService = function () {\n  function NotificationService() {\n    _classCallCheck(this, NotificationService);\n  }\n  return _createClass(NotificationService, [{\n    key: \"requestPermissions\",\n    value: function () {\n      var _requestPermissions = _asyncToGenerator(function* () {\n        if (Platform.OS === 'android') {\n          yield Notifications.setNotificationChannelAsync('chrona-timer', {\n            name: 'Chrona Timer',\n            importance: Notifications.AndroidImportance.HIGH,\n            vibrationPattern: [0, 250, 250, 250],\n            lightColor: '#00E676'\n          });\n        }\n        return Notifications.requestPermissionsAsync();\n      });\n      function requestPermissions() {\n        return _requestPermissions.apply(this, arguments);\n      }\n      return requestPermissions;\n    }()\n  }, {\n    key: \"showTimerNotification\",\n    value: function () {\n      var _showTimerNotification = _asyncToGenerator(function* (taskName, elapsedTime) {\n        yield Notifications.dismissAllNotificationsAsync();\n        return yield Notifications.scheduleNotificationAsync({\n          content: {\n            title: 'Chrona Timer Running',\n            body: `${taskName}: ${elapsedTime}`,\n            data: {\n              type: 'timer_running',\n              taskName: taskName,\n              elapsedTime: elapsedTime\n            },\n            autoDismiss: false,\n            sticky: true,\n            sound: false\n          },\n          trigger: null\n        });\n      });\n      function showTimerNotification(_x, _x2) {\n        return _showTimerNotification.apply(this, arguments);\n      }\n      return showTimerNotification;\n    }()\n  }, {\n    key: \"updateTimerNotification\",\n    value: function () {\n      var _updateTimerNotification = _asyncToGenerator(function* (notificationId, taskName, elapsedTime) {\n        yield Notifications.dismissNotificationAsync(notificationId);\n        return this.showTimerNotification(taskName, elapsedTime);\n      });\n      function updateTimerNotification(_x3, _x4, _x5) {\n        return _updateTimerNotification.apply(this, arguments);\n      }\n      return updateTimerNotification;\n    }()\n  }, {\n    key: \"showTimerCompletedNotification\",\n    value: function () {\n      var _showTimerCompletedNotification = _asyncToGenerator(function* (taskName, duration) {\n        yield Notifications.dismissAllNotificationsAsync();\n        return yield Notifications.scheduleNotificationAsync({\n          content: {\n            title: 'Time Tracked',\n            body: `${taskName}: ${duration}`,\n            data: {\n              type: 'timer_completed'\n            }\n          },\n          trigger: null\n        });\n      });\n      function showTimerCompletedNotification(_x6, _x7) {\n        return _showTimerCompletedNotification.apply(this, arguments);\n      }\n      return showTimerCompletedNotification;\n    }()\n  }, {\n    key: \"showErrorNotification\",\n    value: function () {\n      var _showErrorNotification = _asyncToGenerator(function* (title, message) {\n        return yield Notifications.scheduleNotificationAsync({\n          content: {\n            title: title,\n            body: message,\n            data: {\n              type: 'error'\n            }\n          },\n          trigger: null\n        });\n      });\n      function showErrorNotification(_x8, _x9) {\n        return _showErrorNotification.apply(this, arguments);\n      }\n      return showErrorNotification;\n    }()\n  }, {\n    key: \"clearAllNotifications\",\n    value: function () {\n      var _clearAllNotifications = _asyncToGenerator(function* () {\n        return yield Notifications.dismissAllNotificationsAsync();\n      });\n      function clearAllNotifications() {\n        return _clearAllNotifications.apply(this, arguments);\n      }\n      return clearAllNotifications;\n    }()\n  }]);\n}();\nexport default new NotificationService();","map":{"version":3,"names":["Notifications","Platform","setNotificationHandler","handleNotification","_handleNotification","_asyncToGenerator","shouldShowAlert","shouldPlaySound","shouldSetBadge","apply","arguments","NotificationService","_classCallCheck","_createClass","key","value","_requestPermissions","OS","setNotificationChannelAsync","name","importance","AndroidImportance","HIGH","vibrationPattern","lightColor","requestPermissionsAsync","requestPermissions","_showTimerNotification","taskName","elapsedTime","dismissAllNotificationsAsync","scheduleNotificationAsync","content","title","body","data","type","autoDismiss","sticky","sound","trigger","showTimerNotification","_x","_x2","_updateTimerNotification","notificationId","dismissNotificationAsync","updateTimerNotification","_x3","_x4","_x5","_showTimerCompletedNotification","duration","showTimerCompletedNotification","_x6","_x7","_showErrorNotification","message","showErrorNotification","_x8","_x9","_clearAllNotifications","clearAllNotifications"],"sources":["C:/Users/shikhar/Documents/Programming/Dev/Utility/frontend-android/src/services/NotificationService.ts"],"sourcesContent":["import * as Notifications from 'expo-notifications';\r\nimport { Platform } from 'react-native';\r\n\r\n// Configure notifications for Android\r\nNotifications.setNotificationHandler({\r\n  handleNotification: async () => ({\r\n    shouldShowAlert: true,\r\n    shouldPlaySound: false,\r\n    shouldSetBadge: false,\r\n  }),\r\n});\r\n\r\nclass NotificationService {\r\n  // Request permission for notifications (especially needed for iOS)\r\n  async requestPermissions() {\r\n    if (Platform.OS === 'android') {\r\n      await Notifications.setNotificationChannelAsync('chrona-timer', {\r\n        name: 'Chrona Timer',\r\n        importance: Notifications.AndroidImportance.HIGH,\r\n        vibrationPattern: [0, 250, 250, 250],\r\n        lightColor: '#00E676',\r\n      });\r\n    }\r\n\r\n    return Notifications.requestPermissionsAsync();\r\n  }\r\n\r\n  // Create a foreground notification for the running timer\r\n  async showTimerNotification(taskName: string, elapsedTime: string) {\r\n    // Cancel any existing notifications\r\n    await Notifications.dismissAllNotificationsAsync();\r\n\r\n    return await Notifications.scheduleNotificationAsync({\r\n      content: {\r\n        title: 'Chrona Timer Running',\r\n        body: `${taskName}: ${elapsedTime}`,\r\n        data: { \r\n          type: 'timer_running',\r\n          taskName,\r\n          elapsedTime \r\n        },\r\n        autoDismiss: false,\r\n        sticky: true,\r\n        sound: false,\r\n      },\r\n      trigger: null, // Immediate display\r\n    });\r\n  }\r\n\r\n  // Update the timer notification\r\n  async updateTimerNotification(notificationId: string, taskName: string, elapsedTime: string) {\r\n    await Notifications.dismissNotificationAsync(notificationId);\r\n    return this.showTimerNotification(taskName, elapsedTime);\r\n  }\r\n\r\n  // Create a notification when timer stops\r\n  async showTimerCompletedNotification(taskName: string, duration: string) {\r\n    // Cancel any existing timer notification\r\n    await Notifications.dismissAllNotificationsAsync();\r\n\r\n    return await Notifications.scheduleNotificationAsync({\r\n      content: {\r\n        title: 'Time Tracked',\r\n        body: `${taskName}: ${duration}`,\r\n        data: { type: 'timer_completed' },\r\n      },\r\n      trigger: null,\r\n    });\r\n  }\r\n\r\n  // Create notification for API errors\r\n  async showErrorNotification(title: string, message: string) {\r\n    return await Notifications.scheduleNotificationAsync({\r\n      content: {\r\n        title,\r\n        body: message,\r\n        data: { type: 'error' },\r\n      },\r\n      trigger: null,\r\n    });\r\n  }\r\n\r\n  // Remove all notifications\r\n  async clearAllNotifications() {\r\n    return await Notifications.dismissAllNotificationsAsync();\r\n  }\r\n}\r\n\r\nexport default new NotificationService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}