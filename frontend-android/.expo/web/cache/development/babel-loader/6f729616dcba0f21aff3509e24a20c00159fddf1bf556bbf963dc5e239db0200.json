{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport Timer from \"../components/Timer\";\nimport Button from \"../components/Button\";\nimport theme from \"../theme/theme\";\nimport { TimeEntryService } from \"../services/api\";\nimport NotificationService from \"../services/NotificationService\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar BackArrow = function BackArrow() {\n  return _jsx(View, {\n    style: backArrowStyles.container,\n    children: _jsx(View, {\n      style: backArrowStyles.arrow\n    })\n  });\n};\nvar backArrowStyles = StyleSheet.create({\n  container: {\n    width: 24,\n    height: 24,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  arrow: {\n    width: 16,\n    height: 16,\n    borderTopWidth: 2,\n    borderLeftWidth: 2,\n    borderColor: theme.colors.text,\n    transform: [{\n      rotate: '-45deg'\n    }]\n  }\n});\nvar TimerScreen = function TimerScreen() {\n  var navigation = useNavigation();\n  var route = useRoute();\n  var _route$params = route.params,\n    taskId = _route$params.taskId,\n    taskName = _route$params.taskName;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isTracking = _useState2[0],\n    setIsTracking = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    startTime = _useState4[0],\n    setStartTime = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    entryId = _useState6[0],\n    setEntryId = _useState6[1];\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    totalSeconds = _useState8[0],\n    setTotalSeconds = _useState8[1];\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    loading = _useState10[0],\n    setLoading = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    minimized = _useState12[0],\n    setMinimized = _useState12[1];\n  useEffect(function () {\n    var backHandler = BackHandler.addEventListener('hardwareBackPress', function () {\n      if (isTracking) {\n        handleMinimize();\n        return true;\n      }\n      return false;\n    });\n    return function () {\n      return backHandler.remove();\n    };\n  }, [isTracking]);\n  useEffect(function () {\n    startTimer();\n  }, []);\n  var startTimer = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        setLoading(true);\n        var timerState = yield TimeEntryService.checkForRunningTimer();\n        if (timerState.isRunning && timerState.entryId && timerState.startTime) {\n          setEntryId(timerState.entryId);\n          setStartTime(timerState.startTime);\n          setIsTracking(true);\n        } else {\n          var _startTime = new Date();\n          setStartTime(_startTime);\n          var timeEntry = yield TimeEntryService.createTimeEntry(taskId);\n          setEntryId(timeEntry.id);\n          setIsTracking(true);\n        }\n      } catch (error) {\n        console.error('Error starting timer:', error);\n        Alert.alert('Error', 'Failed to start timer. Please try again.');\n        navigation.goBack();\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function startTimer() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var stopTimer = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        if (!entryId || !startTime) return;\n        setLoading(true);\n        var durationMinutes = totalSeconds / 60;\n        yield TimeEntryService.updateTimeEntry(entryId, durationMinutes);\n        var formattedTime = formatDuration(totalSeconds);\n        yield NotificationService.showTimerCompletedNotification(taskName, formattedTime);\n        setIsTracking(false);\n        setStartTime(null);\n        setEntryId(null);\n        Alert.alert('Time Tracked', `${taskName}: ${formattedTime}`, [{\n          text: 'OK',\n          onPress: function onPress() {\n            return navigation.navigate('Home');\n          }\n        }]);\n      } catch (error) {\n        console.error('Error stopping timer:', error);\n        Alert.alert('Error', 'Failed to stop timer. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function stopTimer() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleMinimize = function handleMinimize() {\n    if (isTracking) {\n      setMinimized(true);\n      Alert.alert('Timer Running in Background', 'Timer will continue running in the notification area', [{\n        text: 'OK'\n      }]);\n      navigation.navigate('Home');\n    }\n  };\n  var formatDuration = function formatDuration(seconds) {\n    var hours = Math.floor(seconds / 3600);\n    var minutes = Math.floor(seconds % 3600 / 60);\n    var secs = seconds % 60;\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  var handleTimerTick = function handleTimerTick(seconds) {\n    setTotalSeconds(seconds);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.header,\n      children: [_jsx(TouchableOpacity, {\n        style: styles.backButton,\n        onPress: function onPress() {\n          if (isTracking) {\n            handleMinimize();\n          } else {\n            navigation.goBack();\n          }\n        },\n        children: _jsx(BackArrow, {})\n      }), _jsx(Text, {\n        style: styles.title,\n        children: \"Tracking Time\"\n      })]\n    }), _jsxs(View, {\n      style: styles.taskContainer,\n      children: [_jsx(Text, {\n        style: styles.label,\n        children: \"Current Task:\"\n      }), _jsx(Text, {\n        style: styles.taskName,\n        children: taskName\n      })]\n    }), _jsx(View, {\n      style: styles.timerContainer,\n      children: _jsx(Timer, {\n        isRunning: isTracking,\n        startTime: startTime,\n        taskName: taskName,\n        onTick: handleTimerTick\n      })\n    }), _jsxs(View, {\n      style: styles.buttonContainer,\n      children: [_jsx(Button, {\n        title: \"Stop Tracking\",\n        onPress: stopTimer,\n        variant: \"danger\",\n        size: \"large\",\n        disabled: !isTracking || loading,\n        loading: loading,\n        style: styles.button\n      }), _jsx(Button, {\n        title: \"Minimize\",\n        onPress: handleMinimize,\n        variant: \"outline\",\n        size: \"medium\",\n        disabled: !isTracking || loading,\n        style: styles.minimizeButton\n      })]\n    }), _jsxs(View, {\n      style: styles.infoContainer,\n      children: [_jsx(Text, {\n        style: styles.infoText,\n        children: \"Timer will continue running in background.\"\n      }), _jsx(Text, {\n        style: styles.infoText,\n        children: \"Press the notification to return to this screen.\"\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.colors.background\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: theme.spacing.lg,\n    borderBottomWidth: 1,\n    borderBottomColor: theme.colors.divider\n  },\n  backButton: {\n    marginRight: theme.spacing.md\n  },\n  title: {\n    fontSize: theme.typography.fontSizes.xl,\n    fontWeight: theme.typography.fontWeights.bold,\n    color: theme.colors.text\n  },\n  taskContainer: _objectSpread({\n    padding: theme.spacing.lg,\n    backgroundColor: theme.colors.card,\n    marginHorizontal: theme.spacing.md,\n    marginTop: theme.spacing.lg,\n    borderRadius: theme.radius.md\n  }, theme.shadows.sm),\n  label: {\n    fontSize: theme.typography.fontSizes.sm,\n    color: theme.colors.secondaryText,\n    marginBottom: theme.spacing.xs\n  },\n  taskName: {\n    fontSize: theme.typography.fontSizes.lg,\n    fontWeight: theme.typography.fontWeights.semibold,\n    color: theme.colors.text\n  },\n  timerContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  buttonContainer: {\n    padding: theme.spacing.lg,\n    alignItems: 'center'\n  },\n  button: {\n    marginBottom: theme.spacing.md,\n    width: '100%'\n  },\n  minimizeButton: {\n    width: '50%'\n  },\n  infoContainer: {\n    padding: theme.spacing.lg,\n    alignItems: 'center',\n    marginBottom: theme.spacing.lg\n  },\n  infoText: {\n    fontSize: theme.typography.fontSizes.sm,\n    color: theme.colors.secondaryText,\n    textAlign: 'center',\n    marginBottom: theme.spacing.xs\n  }\n});\nexport default TimerScreen;","map":{"version":3,"names":["React","useState","useEffect","View","Text","StyleSheet","Alert","BackHandler","TouchableOpacity","useNavigation","useRoute","Timer","Button","theme","TimeEntryService","NotificationService","jsx","_jsx","jsxs","_jsxs","BackArrow","style","backArrowStyles","container","children","arrow","create","width","height","justifyContent","alignItems","borderTopWidth","borderLeftWidth","borderColor","colors","text","transform","rotate","TimerScreen","navigation","route","_route$params","params","taskId","taskName","_useState","_useState2","_slicedToArray","isTracking","setIsTracking","_useState3","_useState4","startTime","setStartTime","_useState5","_useState6","entryId","setEntryId","_useState7","_useState8","totalSeconds","setTotalSeconds","_useState9","_useState10","loading","setLoading","_useState11","_useState12","minimized","setMinimized","backHandler","addEventListener","handleMinimize","remove","startTimer","_ref","_asyncToGenerator","timerState","checkForRunningTimer","isRunning","Date","timeEntry","createTimeEntry","id","error","console","alert","goBack","apply","arguments","stopTimer","_ref2","durationMinutes","updateTimeEntry","formattedTime","formatDuration","showTimerCompletedNotification","onPress","navigate","seconds","hours","Math","floor","minutes","secs","toString","padStart","handleTimerTick","styles","header","backButton","title","taskContainer","label","timerContainer","onTick","buttonContainer","variant","size","disabled","button","minimizeButton","infoContainer","infoText","flex","backgroundColor","background","flexDirection","padding","spacing","lg","borderBottomWidth","borderBottomColor","divider","marginRight","md","fontSize","typography","fontSizes","xl","fontWeight","fontWeights","bold","color","_objectSpread","card","marginHorizontal","marginTop","borderRadius","radius","shadows","sm","secondaryText","marginBottom","xs","semibold","textAlign"],"sources":["C:/Users/shikhar/Documents/Programming/Dev/Utility/frontend-android/src/screens/TimerScreen.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { \r\n  View, \r\n  Text, \r\n  StyleSheet, \r\n  Alert, \r\n  BackHandler, \r\n  TouchableOpacity\r\n} from 'react-native';\r\nimport { useNavigation, useRoute, RouteProp } from '@react-navigation/native';\r\nimport { StackNavigationProp } from '@react-navigation/stack';\r\nimport { RootStackParamList } from '../types';\r\nimport Timer from '../components/Timer';\r\nimport Button from '../components/Button';\r\nimport theme from '../theme/theme';\r\nimport { TimeEntryService } from '../services/api';\r\nimport NotificationService from '../services/NotificationService';\r\n\r\ntype TimerScreenNavigationProp = StackNavigationProp<RootStackParamList, 'Timer'>;\r\ntype TimerScreenRouteProp = RouteProp<RootStackParamList, 'Timer'>;\r\n\r\n// Custom back arrow component to replace MaterialIcons\r\nconst BackArrow = () => (\r\n  <View style={backArrowStyles.container}>\r\n    <View style={backArrowStyles.arrow} />\r\n  </View>\r\n);\r\n\r\nconst backArrowStyles = StyleSheet.create({\r\n  container: {\r\n    width: 24,\r\n    height: 24,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  arrow: {\r\n    width: 16,\r\n    height: 16,\r\n    borderTopWidth: 2,\r\n    borderLeftWidth: 2,\r\n    borderColor: theme.colors.text,\r\n    transform: [{ rotate: '-45deg' }],\r\n  },\r\n});\r\n\r\nconst TimerScreen: React.FC = () => {\r\n  const navigation = useNavigation<TimerScreenNavigationProp>();\r\n  const route = useRoute<TimerScreenRouteProp>();\r\n  const { taskId, taskName } = route.params;\r\n  \r\n  const [isTracking, setIsTracking] = useState<boolean>(false);\r\n  const [startTime, setStartTime] = useState<Date | null>(null);\r\n  const [entryId, setEntryId] = useState<number | null>(null);\r\n  const [totalSeconds, setTotalSeconds] = useState<number>(0);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [minimized, setMinimized] = useState<boolean>(false);\r\n\r\n  // Handle back button press\r\n  useEffect(() => {\r\n    const backHandler = BackHandler.addEventListener(\r\n      'hardwareBackPress',\r\n      () => {\r\n        if (isTracking) {\r\n          handleMinimize();\r\n          return true; // Prevent default back action\r\n        }\r\n        return false; // Let default back action happen\r\n      }\r\n    );\r\n\r\n    return () => backHandler.remove();\r\n  }, [isTracking]);\r\n\r\n  // Start timer when screen opens\r\n  useEffect(() => {\r\n    startTimer();\r\n  }, []);\r\n\r\n  const startTimer = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Check if we're resuming a session\r\n      const timerState = await TimeEntryService.checkForRunningTimer();\r\n      if (timerState.isRunning && timerState.entryId && timerState.startTime) {\r\n        // Resume existing timer\r\n        setEntryId(timerState.entryId);\r\n        setStartTime(timerState.startTime);\r\n        setIsTracking(true);\r\n      } else {\r\n        // Start new timer\r\n        const startTime = new Date();\r\n        setStartTime(startTime);\r\n        \r\n        const timeEntry = await TimeEntryService.createTimeEntry(taskId);\r\n        setEntryId(timeEntry.id);\r\n        setIsTracking(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error starting timer:', error);\r\n      Alert.alert('Error', 'Failed to start timer. Please try again.');\r\n      navigation.goBack();\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const stopTimer = async () => {\r\n    try {\r\n      if (!entryId || !startTime) return;\r\n      \r\n      setLoading(true);\r\n      \r\n      // Calculate duration in minutes\r\n      const durationMinutes = totalSeconds / 60;\r\n      \r\n      await TimeEntryService.updateTimeEntry(entryId, durationMinutes);\r\n      \r\n      // Show completed notification\r\n      const formattedTime = formatDuration(totalSeconds);\r\n      await NotificationService.showTimerCompletedNotification(taskName, formattedTime);\r\n      \r\n      // Reset state\r\n      setIsTracking(false);\r\n      setStartTime(null);\r\n      setEntryId(null);\r\n      \r\n      // Show completion message and navigate back\r\n      Alert.alert(\r\n        'Time Tracked',\r\n        `${taskName}: ${formattedTime}`,\r\n        [{ text: 'OK', onPress: () => navigation.navigate('Home') }]\r\n      );\r\n    } catch (error) {\r\n      console.error('Error stopping timer:', error);\r\n      Alert.alert('Error', 'Failed to stop timer. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleMinimize = () => {\r\n    if (isTracking) {\r\n      setMinimized(true);\r\n      Alert.alert(\r\n        'Timer Running in Background',\r\n        'Timer will continue running in the notification area',\r\n        [{ text: 'OK' }]\r\n      );\r\n      navigation.navigate('Home');\r\n    }\r\n  };\r\n\r\n  const formatDuration = (seconds: number): string => {\r\n    const hours = Math.floor(seconds / 3600);\r\n    const minutes = Math.floor((seconds % 3600) / 60);\r\n    const secs = seconds % 60;\r\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  const handleTimerTick = (seconds: number) => {\r\n    setTotalSeconds(seconds);\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.header}>\r\n        <TouchableOpacity \r\n          style={styles.backButton}\r\n          onPress={() => {\r\n            if (isTracking) {\r\n              handleMinimize();\r\n            } else {\r\n              navigation.goBack();\r\n            }\r\n          }}\r\n        >\r\n          <BackArrow />\r\n        </TouchableOpacity>\r\n        <Text style={styles.title}>Tracking Time</Text>\r\n      </View>\r\n      \r\n      <View style={styles.taskContainer}>\r\n        <Text style={styles.label}>Current Task:</Text>\r\n        <Text style={styles.taskName}>{taskName}</Text>\r\n      </View>\r\n      \r\n      <View style={styles.timerContainer}>\r\n        <Timer \r\n          isRunning={isTracking} \r\n          startTime={startTime} \r\n          taskName={taskName}\r\n          onTick={handleTimerTick}\r\n        />\r\n      </View>\r\n      \r\n      <View style={styles.buttonContainer}>\r\n        <Button\r\n          title=\"Stop Tracking\"\r\n          onPress={stopTimer}\r\n          variant=\"danger\"\r\n          size=\"large\"\r\n          disabled={!isTracking || loading}\r\n          loading={loading}\r\n          style={styles.button}\r\n        />\r\n        \r\n        <Button\r\n          title=\"Minimize\"\r\n          onPress={handleMinimize}\r\n          variant=\"outline\"\r\n          size=\"medium\"\r\n          disabled={!isTracking || loading}\r\n          style={styles.minimizeButton}\r\n        />\r\n      </View>\r\n      \r\n      <View style={styles.infoContainer}>\r\n        <Text style={styles.infoText}>\r\n          Timer will continue running in background.\r\n        </Text>\r\n        <Text style={styles.infoText}>\r\n          Press the notification to return to this screen.\r\n        </Text>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: theme.colors.background,\r\n  },\r\n  header: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    padding: theme.spacing.lg,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: theme.colors.divider,\r\n  },\r\n  backButton: {\r\n    marginRight: theme.spacing.md,\r\n  },\r\n  title: {\r\n    fontSize: theme.typography.fontSizes.xl,\r\n    fontWeight: theme.typography.fontWeights.bold as any,\r\n    color: theme.colors.text,\r\n  },\r\n  taskContainer: {\r\n    padding: theme.spacing.lg,\r\n    backgroundColor: theme.colors.card,\r\n    marginHorizontal: theme.spacing.md,\r\n    marginTop: theme.spacing.lg,\r\n    borderRadius: theme.radius.md,\r\n    ...theme.shadows.sm,\r\n  },\r\n  label: {\r\n    fontSize: theme.typography.fontSizes.sm,\r\n    color: theme.colors.secondaryText,\r\n    marginBottom: theme.spacing.xs,\r\n  },\r\n  taskName: {\r\n    fontSize: theme.typography.fontSizes.lg,\r\n    fontWeight: theme.typography.fontWeights.semibold as any,\r\n    color: theme.colors.text,\r\n  },\r\n  timerContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  buttonContainer: {\r\n    padding: theme.spacing.lg,\r\n    alignItems: 'center',\r\n  },\r\n  button: {\r\n    marginBottom: theme.spacing.md,\r\n    width: '100%',\r\n  },\r\n  minimizeButton: {\r\n    width: '50%',\r\n  },\r\n  infoContainer: {\r\n    padding: theme.spacing.lg,\r\n    alignItems: 'center',\r\n    marginBottom: theme.spacing.lg,\r\n  },\r\n  infoText: {\r\n    fontSize: theme.typography.fontSizes.sm,\r\n    color: theme.colors.secondaryText,\r\n    textAlign: 'center',\r\n    marginBottom: theme.spacing.xs,\r\n  },\r\n});\r\n\r\nexport default TimerScreen; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}