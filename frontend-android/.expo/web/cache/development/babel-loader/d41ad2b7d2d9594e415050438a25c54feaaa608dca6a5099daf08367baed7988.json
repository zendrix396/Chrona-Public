{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { CodedError } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\nvar INSTALLATION_ID_KEY = 'EXPO_NOTIFICATIONS_INSTALLATION_ID';\nvar REGISTRATION_INFO_KEY = 'EXPO_NOTIFICATIONS_REGISTRATION_INFO';\nvar _getFallbackInstallationId = function getFallbackInstallationId() {\n  var sessionInstallationId = uuidv4();\n  _getFallbackInstallationId = function getFallbackInstallationId() {\n    return sessionInstallationId;\n  };\n};\nexport default {\n  getInstallationIdAsync: function () {\n    var _getInstallationIdAsync = _asyncToGenerator(function* () {\n      var installationId;\n      try {\n        installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n        if (!installationId || typeof installationId !== 'string') {\n          installationId = uuidv4();\n          localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n        }\n      } catch (_unused) {\n        installationId = _getFallbackInstallationId();\n      }\n      return installationId;\n    });\n    function getInstallationIdAsync() {\n      return _getInstallationIdAsync.apply(this, arguments);\n    }\n    return getInstallationIdAsync;\n  }(),\n  getRegistrationInfoAsync: function () {\n    var _getRegistrationInfoAsync = _asyncToGenerator(function* () {\n      return localStorage.getItem(REGISTRATION_INFO_KEY);\n    });\n    function getRegistrationInfoAsync() {\n      return _getRegistrationInfoAsync.apply(this, arguments);\n    }\n    return getRegistrationInfoAsync;\n  }(),\n  setRegistrationInfoAsync: function () {\n    var _setRegistrationInfoAsync = _asyncToGenerator(function* (registrationInfo) {\n      try {\n        if (registrationInfo) {\n          localStorage.setItem(REGISTRATION_INFO_KEY, registrationInfo);\n        } else {\n          localStorage.removeItem(REGISTRATION_INFO_KEY);\n        }\n      } catch (error) {\n        throw new CodedError('ERR_NOTIFICATIONS_STORAGE_ERROR', `Could not modify localStorage to persist auto-registration information: ${error}`);\n      }\n    });\n    function setRegistrationInfoAsync(_x) {\n      return _setRegistrationInfoAsync.apply(this, arguments);\n    }\n    return setRegistrationInfoAsync;\n  }(),\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {}\n};","map":{"version":3,"names":["CodedError","v4","uuidv4","INSTALLATION_ID_KEY","REGISTRATION_INFO_KEY","getFallbackInstallationId","sessionInstallationId","getInstallationIdAsync","_getInstallationIdAsync","_asyncToGenerator","installationId","localStorage","getItem","setItem","_unused","apply","arguments","getRegistrationInfoAsync","_getRegistrationInfoAsync","setRegistrationInfoAsync","_setRegistrationInfoAsync","registrationInfo","removeItem","error","_x","addListener","removeListeners"],"sources":["C:\\Users\\shikhar\\Documents\\Programming\\Dev\\Utility\\frontend-android\\node_modules\\expo-notifications\\src\\ServerRegistrationModule.web.ts"],"sourcesContent":["import { CodedError } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { ServerRegistrationModule } from './ServerRegistrationModule.types';\n\nconst INSTALLATION_ID_KEY = 'EXPO_NOTIFICATIONS_INSTALLATION_ID';\nconst REGISTRATION_INFO_KEY = 'EXPO_NOTIFICATIONS_REGISTRATION_INFO';\n\n// Lazy fallback installationId per session initializer\nlet getFallbackInstallationId = () => {\n  const sessionInstallationId = uuidv4();\n  getFallbackInstallationId = () => sessionInstallationId;\n};\n\nexport default {\n  getInstallationIdAsync: async () => {\n    let installationId;\n\n    try {\n      installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n      if (!installationId || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n      }\n    } catch {\n      installationId = getFallbackInstallationId();\n    }\n\n    return installationId;\n  },\n  getRegistrationInfoAsync: async () => {\n    return localStorage.getItem(REGISTRATION_INFO_KEY);\n  },\n  setRegistrationInfoAsync: async (registrationInfo: string | null) => {\n    try {\n      if (registrationInfo) {\n        localStorage.setItem(REGISTRATION_INFO_KEY, registrationInfo);\n      } else {\n        localStorage.removeItem(REGISTRATION_INFO_KEY);\n      }\n    } catch (error) {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_STORAGE_ERROR',\n        `Could not modify localStorage to persist auto-registration information: ${error}`\n      );\n    }\n  },\n  // mock implementations\n  addListener: () => {},\n  removeListeners: () => {},\n} as ServerRegistrationModule;\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAInC,IAAMC,mBAAmB,GAAG,oCAAoC;AAChE,IAAMC,qBAAqB,GAAG,sCAAsC;AAGpE,IAAIC,0BAAyB,GAAG,SAA5BA,yBAAyBA,CAAA,EAAQ;EACnC,IAAMC,qBAAqB,GAAGJ,MAAM,EAAE;EACtCG,0BAAyB,GAAG,SAA5BA,yBAAyBA,CAAA;IAAA,OAASC,qBAAqB;EAAA;AACzD,CAAC;AAED,eAAe;EACbC,sBAAsB;IAAA,IAAAC,uBAAA,GAAAC,iBAAA,CAAE,aAAW;MACjC,IAAIC,cAAc;MAElB,IAAI;QACFA,cAAc,GAAGC,YAAY,CAACC,OAAO,CAACT,mBAAmB,CAAC;QAC1D,IAAI,CAACO,cAAc,IAAI,OAAOA,cAAc,KAAK,QAAQ,EAAE;UACzDA,cAAc,GAAGR,MAAM,EAAE;UACzBS,YAAY,CAACE,OAAO,CAACV,mBAAmB,EAAEO,cAAc,CAAC;;OAE5D,CAAC,OAAAI,OAAA,EAAM;QACNJ,cAAc,GAAGL,0BAAyB,EAAE;;MAG9C,OAAOK,cAAc;IACvB,CAAC;IAAA,SAdDH,sBAAsBA,CAAA;MAAA,OAAAC,uBAAA,CAAAO,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAtBT,sBAAsB;EAAA,GAcrB;EACDU,wBAAwB;IAAA,IAAAC,yBAAA,GAAAT,iBAAA,CAAE,aAAW;MACnC,OAAOE,YAAY,CAACC,OAAO,CAACR,qBAAqB,CAAC;IACpD,CAAC;IAAA,SAFDa,wBAAwBA,CAAA;MAAA,OAAAC,yBAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAxBC,wBAAwB;EAAA,GAEvB;EACDE,wBAAwB;IAAA,IAAAC,yBAAA,GAAAX,iBAAA,CAAE,WAAOY,gBAA+B,EAAI;MAClE,IAAI;QACF,IAAIA,gBAAgB,EAAE;UACpBV,YAAY,CAACE,OAAO,CAACT,qBAAqB,EAAEiB,gBAAgB,CAAC;SAC9D,MAAM;UACLV,YAAY,CAACW,UAAU,CAAClB,qBAAqB,CAAC;;OAEjD,CAAC,OAAOmB,KAAK,EAAE;QACd,MAAM,IAAIvB,UAAU,CAClB,iCAAiC,EACjC,2EAA2EuB,KAAK,EAAE,CACnF;;IAEL,CAAC;IAAA,SAbDJ,wBAAwBA,CAAAK,EAAA;MAAA,OAAAJ,yBAAA,CAAAL,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAxBG,wBAAwB;EAAA,GAavB;EAEDM,WAAW,EAAE,SAAbA,WAAWA,CAAA,EAAO,CAAE,CAAC;EACrBC,eAAe,EAAE,SAAjBA,eAAeA,CAAA,EAAO,CAAE;CACG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}