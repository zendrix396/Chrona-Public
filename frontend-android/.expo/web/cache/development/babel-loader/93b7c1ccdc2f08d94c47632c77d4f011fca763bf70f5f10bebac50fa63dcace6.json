{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar api = axios.create({\n  baseURL: 'https://chrona-backend.onrender.com',\n  timeout: 15000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport var TaskService = {\n  fetchTasks: function () {\n    var _fetchTasks = _asyncToGenerator(function* () {\n      try {\n        var response = yield api.get('/tasks/');\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching tasks:', error);\n        throw error;\n      }\n    });\n    function fetchTasks() {\n      return _fetchTasks.apply(this, arguments);\n    }\n    return fetchTasks;\n  }(),\n  createTask: function () {\n    var _createTask = _asyncToGenerator(function* (name, description) {\n      try {\n        var response = yield api.post('/tasks/', {\n          name: name,\n          description: description || null,\n          status: 'active'\n        });\n        return response.data;\n      } catch (error) {\n        console.error('Error creating task:', error);\n        throw error;\n      }\n    });\n    function createTask(_x, _x2) {\n      return _createTask.apply(this, arguments);\n    }\n    return createTask;\n  }()\n};\nexport var TimeEntryService = {\n  createTimeEntry: function () {\n    var _createTimeEntry = _asyncToGenerator(function* (taskId) {\n      try {\n        var response = yield api.post('/time-entries/', {\n          task_id: taskId,\n          start_time: new Date().toISOString().slice(0, 19),\n          end_time: null,\n          duration: null,\n          notes: null\n        });\n        yield AsyncStorage.setItem('current_entry_id', response.data.id.toString());\n        yield AsyncStorage.setItem('current_task_id', taskId.toString());\n        yield AsyncStorage.setItem('start_time', new Date().toISOString());\n        return response.data;\n      } catch (error) {\n        console.error('Error creating time entry:', error);\n        throw error;\n      }\n    });\n    function createTimeEntry(_x3) {\n      return _createTimeEntry.apply(this, arguments);\n    }\n    return createTimeEntry;\n  }(),\n  updateTimeEntry: function () {\n    var _updateTimeEntry = _asyncToGenerator(function* (entryId, durationMinutes) {\n      try {\n        var response = yield api.put(`/time-entries/${entryId}`, {\n          end_time: new Date().toISOString().slice(0, 19),\n          duration: durationMinutes,\n          notes: null\n        });\n        yield AsyncStorage.removeItem('current_entry_id');\n        yield AsyncStorage.removeItem('current_task_id');\n        yield AsyncStorage.removeItem('start_time');\n        return response.data;\n      } catch (error) {\n        console.error('Error updating time entry:', error);\n        throw error;\n      }\n    });\n    function updateTimeEntry(_x4, _x5) {\n      return _updateTimeEntry.apply(this, arguments);\n    }\n    return updateTimeEntry;\n  }(),\n  getTimeEntries: function () {\n    var _getTimeEntries = _asyncToGenerator(function* () {\n      try {\n        var response = yield api.get('/time-entries/');\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching time entries:', error);\n        throw error;\n      }\n    });\n    function getTimeEntries() {\n      return _getTimeEntries.apply(this, arguments);\n    }\n    return getTimeEntries;\n  }(),\n  checkForRunningTimer: function () {\n    var _checkForRunningTimer = _asyncToGenerator(function* () {\n      try {\n        var entryId = yield AsyncStorage.getItem('current_entry_id');\n        var taskId = yield AsyncStorage.getItem('current_task_id');\n        var startTimeStr = yield AsyncStorage.getItem('start_time');\n        if (entryId && taskId && startTimeStr) {\n          return {\n            isRunning: true,\n            entryId: parseInt(entryId),\n            taskId: parseInt(taskId),\n            startTime: new Date(startTimeStr)\n          };\n        }\n        return {\n          isRunning: false\n        };\n      } catch (error) {\n        console.error('Error checking for running timer:', error);\n        return {\n          isRunning: false\n        };\n      }\n    });\n    function checkForRunningTimer() {\n      return _checkForRunningTimer.apply(this, arguments);\n    }\n    return checkForRunningTimer;\n  }()\n};\nexport default api;","map":{"version":3,"names":["axios","AsyncStorage","api","create","baseURL","timeout","headers","TaskService","fetchTasks","_fetchTasks","_asyncToGenerator","response","get","data","error","console","apply","arguments","createTask","_createTask","name","description","post","status","_x","_x2","TimeEntryService","createTimeEntry","_createTimeEntry","taskId","task_id","start_time","Date","toISOString","slice","end_time","duration","notes","setItem","id","toString","_x3","updateTimeEntry","_updateTimeEntry","entryId","durationMinutes","put","removeItem","_x4","_x5","getTimeEntries","_getTimeEntries","checkForRunningTimer","_checkForRunningTimer","getItem","startTimeStr","isRunning","parseInt","startTime"],"sources":["C:/Users/shikhar/Documents/Programming/Dev/Utility/frontend-android/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { Task, TimeEntry } from '../types';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: 'https://chrona-backend.onrender.com',\r\n  timeout: 15000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// API service for tasks\r\nexport const TaskService = {\r\n  async fetchTasks(): Promise<Task[]> {\r\n    try {\r\n      const response = await api.get('/tasks/');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching tasks:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async createTask(name: string, description?: string): Promise<Task> {\r\n    try {\r\n      const response = await api.post('/tasks/', {\r\n        name,\r\n        description: description || null,\r\n        status: 'active',\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating task:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\n// API service for time entries\r\nexport const TimeEntryService = {\r\n  async createTimeEntry(taskId: number): Promise<TimeEntry> {\r\n    try {\r\n      const response = await api.post('/time-entries/', {\r\n        task_id: taskId,\r\n        start_time: new Date().toISOString().slice(0, 19), // format: YYYY-MM-DDTHH:MM:SS\r\n        end_time: null,\r\n        duration: null,\r\n        notes: null,\r\n      });\r\n      \r\n      // Store entry ID for recovery if app crashes\r\n      await AsyncStorage.setItem('current_entry_id', response.data.id.toString());\r\n      await AsyncStorage.setItem('current_task_id', taskId.toString());\r\n      await AsyncStorage.setItem('start_time', new Date().toISOString());\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating time entry:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async updateTimeEntry(entryId: number, durationMinutes: number): Promise<TimeEntry> {\r\n    try {\r\n      const response = await api.put(`/time-entries/${entryId}`, {\r\n        end_time: new Date().toISOString().slice(0, 19), // format: YYYY-MM-DDTHH:MM:SS\r\n        duration: durationMinutes,\r\n        notes: null,\r\n      });\r\n      \r\n      // Clear stored entry data\r\n      await AsyncStorage.removeItem('current_entry_id');\r\n      await AsyncStorage.removeItem('current_task_id');\r\n      await AsyncStorage.removeItem('start_time');\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating time entry:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getTimeEntries(): Promise<TimeEntry[]> {\r\n    try {\r\n      const response = await api.get('/time-entries/');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching time entries:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Check if we have a running timer (for app restart recovery)\r\n  async checkForRunningTimer(): Promise<{ isRunning: boolean; entryId?: number; taskId?: number; startTime?: Date }> {\r\n    try {\r\n      const entryId = await AsyncStorage.getItem('current_entry_id');\r\n      const taskId = await AsyncStorage.getItem('current_task_id');\r\n      const startTimeStr = await AsyncStorage.getItem('start_time');\r\n      \r\n      if (entryId && taskId && startTimeStr) {\r\n        return {\r\n          isRunning: true,\r\n          entryId: parseInt(entryId),\r\n          taskId: parseInt(taskId),\r\n          startTime: new Date(startTimeStr),\r\n        };\r\n      }\r\n      \r\n      return { isRunning: false };\r\n    } catch (error) {\r\n      console.error('Error checking for running timer:', error);\r\n      return { isRunning: false };\r\n    }\r\n  },\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}