{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport theme from \"../theme/theme\";\nimport NotificationService from \"../services/NotificationService\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Timer = function Timer(_ref) {\n  var isRunning = _ref.isRunning,\n    startTime = _ref.startTime,\n    taskName = _ref.taskName,\n    onTick = _ref.onTick;\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    elapsedTime = _useState2[0],\n    setElapsedTime = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    notificationId = _useState4[0],\n    setNotificationId = _useState4[1];\n  var timerRef = useRef(null);\n  var formatTime = function formatTime(seconds) {\n    var hours = Math.floor(seconds / 3600);\n    var minutes = Math.floor(seconds % 3600 / 60);\n    var secs = seconds % 60;\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n  useEffect(function () {\n    if (startTime && isRunning) {\n      var now = new Date();\n      var diffInSeconds = Math.floor((now.getTime() - startTime.getTime()) / 1000);\n      setElapsedTime(diffInSeconds);\n    } else if (!isRunning) {\n      setElapsedTime(0);\n    }\n  }, [startTime, isRunning]);\n  useEffect(function () {\n    if (isRunning) {\n      timerRef.current = setInterval(function () {\n        setElapsedTime(function (prev) {\n          var newTime = prev + 1;\n          if (onTick) {\n            onTick(newTime);\n          }\n          return newTime;\n        });\n      }, 1000);\n    } else if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n    return function () {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [isRunning, onTick]);\n  useEffect(function () {\n    var updateNotification = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        if (isRunning) {\n          var _formattedTime = formatTime(elapsedTime);\n          if (notificationId) {\n            var newId = yield NotificationService.updateTimerNotification(notificationId, taskName, _formattedTime);\n            setNotificationId(newId);\n          } else {\n            var id = yield NotificationService.showTimerNotification(taskName, _formattedTime);\n            setNotificationId(id);\n          }\n        } else if (notificationId) {\n          yield NotificationService.clearAllNotifications();\n          setNotificationId(null);\n        }\n      });\n      return function updateNotification() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    if (elapsedTime % 5 === 0 || elapsedTime === 0) {\n      updateNotification();\n    }\n  }, [elapsedTime, isRunning, taskName, notificationId]);\n  useEffect(function () {\n    return function () {\n      if (notificationId) {\n        NotificationService.clearAllNotifications();\n      }\n    };\n  }, [notificationId]);\n  var formattedTime = formatTime(elapsedTime);\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(Text, {\n      style: styles.timerText,\n      children: formattedTime\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    padding: theme.spacing.lg,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  timerText: {\n    fontFamily: 'monospace',\n    fontSize: theme.typography.fontSizes.xxxl,\n    fontWeight: theme.typography.fontWeights.bold,\n    color: theme.colors.primary,\n    textShadowColor: 'rgba(0, 230, 118, 0.3)',\n    textShadowOffset: {\n      width: 0,\n      height: 0\n    },\n    textShadowRadius: 10\n  }\n});\nexport default Timer;","map":{"version":3,"names":["React","useState","useEffect","useRef","View","Text","StyleSheet","theme","NotificationService","jsx","_jsx","Timer","_ref","isRunning","startTime","taskName","onTick","_useState","_useState2","_slicedToArray","elapsedTime","setElapsedTime","_useState3","_useState4","notificationId","setNotificationId","timerRef","formatTime","seconds","hours","Math","floor","minutes","secs","toString","padStart","now","Date","diffInSeconds","getTime","current","setInterval","prev","newTime","clearInterval","updateNotification","_ref2","_asyncToGenerator","formattedTime","newId","updateTimerNotification","id","showTimerNotification","clearAllNotifications","apply","arguments","style","styles","container","children","timerText","create","padding","spacing","lg","alignItems","justifyContent","fontFamily","fontSize","typography","fontSizes","xxxl","fontWeight","fontWeights","bold","color","colors","primary","textShadowColor","textShadowOffset","width","height","textShadowRadius"],"sources":["C:/Users/shikhar/Documents/Programming/Dev/Utility/frontend-android/src/components/Timer.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { View, Text, StyleSheet } from 'react-native';\r\nimport theme from '../theme/theme';\r\nimport NotificationService from '../services/NotificationService';\r\n\r\ninterface TimerProps {\r\n  isRunning: boolean;\r\n  startTime: Date | null;\r\n  taskName: string;\r\n  onTick?: (elapsedSeconds: number) => void;\r\n}\r\n\r\nconst Timer: React.FC<TimerProps> = ({ \r\n  isRunning, \r\n  startTime, \r\n  taskName,\r\n  onTick \r\n}) => {\r\n  const [elapsedTime, setElapsedTime] = useState<number>(0);\r\n  const [notificationId, setNotificationId] = useState<string | null>(null);\r\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // Format seconds into HH:MM:SS\r\n  const formatTime = (seconds: number): string => {\r\n    const hours = Math.floor(seconds / 3600);\r\n    const minutes = Math.floor((seconds % 3600) / 60);\r\n    const secs = seconds % 60;\r\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  // Calculate initial elapsed time if timer was already running\r\n  useEffect(() => {\r\n    if (startTime && isRunning) {\r\n      const now = new Date();\r\n      const diffInSeconds = Math.floor((now.getTime() - startTime.getTime()) / 1000);\r\n      setElapsedTime(diffInSeconds);\r\n    } else if (!isRunning) {\r\n      setElapsedTime(0);\r\n    }\r\n  }, [startTime, isRunning]);\r\n\r\n  // Set up timer interval\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      timerRef.current = setInterval(() => {\r\n        setElapsedTime(prev => {\r\n          const newTime = prev + 1;\r\n          if (onTick) {\r\n            onTick(newTime);\r\n          }\r\n          return newTime;\r\n        });\r\n      }, 1000);\r\n    } else if (timerRef.current) {\r\n      clearInterval(timerRef.current);\r\n      timerRef.current = null;\r\n    }\r\n\r\n    return () => {\r\n      if (timerRef.current) {\r\n        clearInterval(timerRef.current);\r\n      }\r\n    };\r\n  }, [isRunning, onTick]);\r\n\r\n  // Update notification when elapsed time changes\r\n  useEffect(() => {\r\n    const updateNotification = async () => {\r\n      if (isRunning) {\r\n        const formattedTime = formatTime(elapsedTime);\r\n        \r\n        if (notificationId) {\r\n          const newId = await NotificationService.updateTimerNotification(\r\n            notificationId,\r\n            taskName,\r\n            formattedTime\r\n          );\r\n          setNotificationId(newId);\r\n        } else {\r\n          const id = await NotificationService.showTimerNotification(\r\n            taskName,\r\n            formattedTime\r\n          );\r\n          setNotificationId(id);\r\n        }\r\n      } else if (notificationId) {\r\n        await NotificationService.clearAllNotifications();\r\n        setNotificationId(null);\r\n      }\r\n    };\r\n\r\n    // Only update notification every 5 seconds to reduce overhead\r\n    if (elapsedTime % 5 === 0 || elapsedTime === 0) {\r\n      updateNotification();\r\n    }\r\n  }, [elapsedTime, isRunning, taskName, notificationId]);\r\n\r\n  // Clean up notifications when component unmounts\r\n  useEffect(() => {\r\n    return () => {\r\n      if (notificationId) {\r\n        NotificationService.clearAllNotifications();\r\n      }\r\n    };\r\n  }, [notificationId]);\r\n\r\n  const formattedTime = formatTime(elapsedTime);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.timerText}>{formattedTime}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    padding: theme.spacing.lg,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  timerText: {\r\n    fontFamily: 'monospace',\r\n    fontSize: theme.typography.fontSizes.xxxl,\r\n    fontWeight: theme.typography.fontWeights.bold as any,\r\n    color: theme.colors.primary,\r\n    textShadowColor: 'rgba(0, 230, 118, 0.3)',\r\n    textShadowOffset: { width: 0, height: 0 },\r\n    textShadowRadius: 10,\r\n  },\r\n});\r\n\r\nexport default Timer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}