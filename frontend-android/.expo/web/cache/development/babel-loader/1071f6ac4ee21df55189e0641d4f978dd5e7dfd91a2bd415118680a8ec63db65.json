{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { createPermissionHook, Platform, UnavailabilityError } from 'expo-modules-core';\nimport NotificationPermissionsModule from \"./NotificationPermissionsModule\";\nexport function getPermissionsAsync() {\n  return _getPermissionsAsync.apply(this, arguments);\n}\nfunction _getPermissionsAsync() {\n  _getPermissionsAsync = _asyncToGenerator(function* () {\n    if (!NotificationPermissionsModule.getPermissionsAsync) {\n      throw new UnavailabilityError('Notifications', 'getPermissionsAsync');\n    }\n    return yield NotificationPermissionsModule.getPermissionsAsync();\n  });\n  return _getPermissionsAsync.apply(this, arguments);\n}\nexport function requestPermissionsAsync(_x) {\n  return _requestPermissionsAsync.apply(this, arguments);\n}\nfunction _requestPermissionsAsync() {\n  _requestPermissionsAsync = _asyncToGenerator(function* (permissions) {\n    if (!NotificationPermissionsModule.requestPermissionsAsync) {\n      throw new UnavailabilityError('Notifications', 'requestPermissionsAsync');\n    }\n    var requestedPermissions = permissions != null ? permissions : {\n      ios: {\n        allowAlert: true,\n        allowBadge: true,\n        allowSound: true\n      }\n    };\n    var requestedPlatformPermissions = requestedPermissions[Platform.OS];\n    return yield NotificationPermissionsModule.requestPermissionsAsync(requestedPlatformPermissions);\n  });\n  return _requestPermissionsAsync.apply(this, arguments);\n}\nexport var usePermissions = createPermissionHook({\n  requestMethod: requestPermissionsAsync,\n  getMethod: getPermissionsAsync\n});","map":{"version":3,"names":["createPermissionHook","Platform","UnavailabilityError","NotificationPermissionsModule","getPermissionsAsync","_getPermissionsAsync","apply","arguments","_asyncToGenerator","requestPermissionsAsync","_x","_requestPermissionsAsync","permissions","requestedPermissions","ios","allowAlert","allowBadge","allowSound","requestedPlatformPermissions","OS","usePermissions","requestMethod","getMethod"],"sources":["C:\\Users\\shikhar\\Documents\\Programming\\Dev\\Utility\\frontend-android\\node_modules\\expo-notifications\\src\\NotificationPermissions.ts"],"sourcesContent":["import { createPermissionHook, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport {\n  NotificationPermissionsRequest,\n  NotificationPermissionsStatus,\n} from './NotificationPermissions.types';\nimport NotificationPermissionsModule from './NotificationPermissionsModule';\n\n/**\n * Calling this function checks current permissions settings related to notifications.\n * It lets you verify whether the app is currently allowed to display alerts, play sounds, etc.\n * There is no user-facing effect of calling this.\n * @return It returns a `Promise` resolving to an object represents permission settings ([`NotificationPermissionsStatus`](#notificationpermissionsstatus)).\n * On iOS, make sure you [properly interpret the permissions response](#interpreting-the-ios-permissions-response).\n * @example Check if the app is allowed to send any type of notifications (interrupting and non-interruptingâ€“provisional on iOS).\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * export async function allowsNotificationsAsync() {\n *   const settings = await Notifications.getPermissionsAsync();\n *   return (\n *     settings.granted || settings.ios?.status === Notifications.IosAuthorizationStatus.PROVISIONAL\n *   );\n * }\n * ```\n * @header permissions\n */\nexport async function getPermissionsAsync() {\n  if (!NotificationPermissionsModule.getPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'getPermissionsAsync');\n  }\n\n  return await NotificationPermissionsModule.getPermissionsAsync();\n}\n\n/**\n * Prompts the user for notification permissions according to request. **Request defaults to asking the user to allow displaying alerts,\n * setting badge count and playing sounds**.\n * @param permissions An object representing configuration for the request scope.\n * @return It returns a Promise resolving to an object represents permission settings ([`NotificationPermissionsStatus`](#notificationpermissionsstatus)).\n * On iOS, make sure you [properly interpret the permissions response](#interpreting-the-ios-permissions-response).\n * @example Prompts the user to allow the app to show alerts, play sounds, set badge count and let Siri read out messages through AirPods.\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * export function requestPermissionsAsync() {\n *   return await Notifications.requestPermissionsAsync({\n *     ios: {\n *       allowAlert: true,\n *       allowBadge: true,\n *       allowSound: true,\n *       allowAnnouncements: true,\n *     },\n *   });\n * }\n * ```\n * @header permissions\n */\nexport async function requestPermissionsAsync(permissions?: NotificationPermissionsRequest) {\n  if (!NotificationPermissionsModule.requestPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'requestPermissionsAsync');\n  }\n\n  const requestedPermissions = permissions ?? {\n    ios: {\n      allowAlert: true,\n      allowBadge: true,\n      allowSound: true,\n    },\n  };\n  const requestedPlatformPermissions = requestedPermissions[Platform.OS];\n  return await NotificationPermissionsModule.requestPermissionsAsync(requestedPlatformPermissions);\n}\n\n// @needsAudit\n/**\n * Check or request permissions to send and receive push notifications.\n * This uses both `requestPermissionsAsync` and `getPermissionsAsync` to interact with the permissions.\n * @example\n * ```ts\n * const [permissionResponse, requestPermission] = Notifications.usePermissions();\n * ```\n * @header permission\n */\nexport const usePermissions = createPermissionHook<\n  NotificationPermissionsStatus,\n  NotificationPermissionsRequest\n>({\n  requestMethod: requestPermissionsAsync,\n  getMethod: getPermissionsAsync,\n});\n"],"mappings":";AAAA,SAASA,oBAAoB,EAAEC,QAAQ,EAAEC,mBAAmB,QAAQ,mBAAmB;AAMvF,OAAOC,6BAA6B;AAqBpC,gBAAsBC,mBAAmBA,CAAA;EAAA,OAAAC,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAMxC,SAAAF,qBAAA;EAAAA,oBAAA,GAAAG,iBAAA,CANM,aAAkC;IACvC,IAAI,CAACL,6BAA6B,CAACC,mBAAmB,EAAE;MACtD,MAAM,IAAIF,mBAAmB,CAAC,eAAe,EAAE,qBAAqB,CAAC;;IAGvE,aAAaC,6BAA6B,CAACC,mBAAmB,EAAE;EAClE,CAAC;EAAA,OAAAC,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAyBD,gBAAsBE,uBAAuBA,CAAAC,EAAA;EAAA,OAAAC,wBAAA,CAAAL,KAAA,OAAAC,SAAA;AAAA;AAc5C,SAAAI,yBAAA;EAAAA,wBAAA,GAAAH,iBAAA,CAdM,WAAuCI,WAA4C;IACxF,IAAI,CAACT,6BAA6B,CAACM,uBAAuB,EAAE;MAC1D,MAAM,IAAIP,mBAAmB,CAAC,eAAe,EAAE,yBAAyB,CAAC;;IAG3E,IAAMW,oBAAoB,GAAGD,WAAW,WAAXA,WAAW,GAAI;MAC1CE,GAAG,EAAE;QACHC,UAAU,EAAE,IAAI;QAChBC,UAAU,EAAE,IAAI;QAChBC,UAAU,EAAE;;KAEf;IACD,IAAMC,4BAA4B,GAAGL,oBAAoB,CAACZ,QAAQ,CAACkB,EAAE,CAAC;IACtE,aAAahB,6BAA6B,CAACM,uBAAuB,CAACS,4BAA4B,CAAC;EAClG,CAAC;EAAA,OAAAP,wBAAA,CAAAL,KAAA,OAAAC,SAAA;AAAA;AAYD,OAAO,IAAMa,cAAc,GAAGpB,oBAAoB,CAGhD;EACAqB,aAAa,EAAEZ,uBAAuB;EACtCa,SAAS,EAAElB;CACZ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}