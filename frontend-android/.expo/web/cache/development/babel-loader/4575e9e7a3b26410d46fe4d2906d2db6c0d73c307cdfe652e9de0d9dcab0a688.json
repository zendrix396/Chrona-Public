{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport { EventEmitter, CodedError, UnavailabilityError } from 'expo-modules-core';\nimport NotificationsHandlerModule from \"./NotificationsHandlerModule\";\nexport var NotificationTimeoutError = function (_CodedError) {\n  function NotificationTimeoutError(notificationId, notification) {\n    var _this;\n    _classCallCheck(this, NotificationTimeoutError);\n    _this = _callSuper(this, NotificationTimeoutError, ['ERR_NOTIFICATION_TIMEOUT', `Notification handling timed out for ID ${notificationId}.`]);\n    _this.info = {\n      id: notificationId,\n      notification: notification\n    };\n    return _this;\n  }\n  _inherits(NotificationTimeoutError, _CodedError);\n  return _createClass(NotificationTimeoutError);\n}(CodedError);\nvar notificationEmitter = new EventEmitter(NotificationsHandlerModule);\nvar handleNotificationEventName = 'onHandleNotification';\nvar handleNotificationTimeoutEventName = 'onHandleNotificationTimeout';\nvar handleSubscription = null;\nvar handleTimeoutSubscription = null;\nexport function setNotificationHandler(handler) {\n  if (handleSubscription) {\n    handleSubscription.remove();\n    handleSubscription = null;\n  }\n  if (handleTimeoutSubscription) {\n    handleTimeoutSubscription.remove();\n    handleTimeoutSubscription = null;\n  }\n  if (handler) {\n    handleSubscription = notificationEmitter.addListener(handleNotificationEventName, function () {\n      var _ref2 = _asyncToGenerator(function* (_ref) {\n        var id = _ref.id,\n          notification = _ref.notification;\n        if (!NotificationsHandlerModule.handleNotificationAsync) {\n          handler.handleError == null ? void 0 : handler.handleError(id, new UnavailabilityError('Notifications', 'handleNotificationAsync'));\n          return;\n        }\n        try {\n          var behavior = yield handler.handleNotification(notification);\n          yield NotificationsHandlerModule.handleNotificationAsync(id, behavior);\n          handler.handleSuccess == null ? void 0 : handler.handleSuccess(id);\n        } catch (error) {\n          handler.handleError == null ? void 0 : handler.handleError(id, error);\n        }\n      });\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    handleTimeoutSubscription = notificationEmitter.addListener(handleNotificationTimeoutEventName, function (_ref3) {\n      var id = _ref3.id,\n        notification = _ref3.notification;\n      return handler.handleError == null ? void 0 : handler.handleError(id, new NotificationTimeoutError(id, notification));\n    });\n  }\n}","map":{"version":3,"names":["EventEmitter","CodedError","UnavailabilityError","NotificationsHandlerModule","NotificationTimeoutError","_CodedError","notificationId","notification","_this","_classCallCheck","_callSuper","info","id","_inherits","_createClass","notificationEmitter","handleNotificationEventName","handleNotificationTimeoutEventName","handleSubscription","handleTimeoutSubscription","setNotificationHandler","handler","remove","addListener","_ref2","_asyncToGenerator","_ref","handleNotificationAsync","handleError","behavior","handleNotification","handleSuccess","error","_x","apply","arguments","_ref3"],"sources":["C:\\Users\\shikhar\\Documents\\Programming\\Dev\\Utility\\frontend-android\\node_modules\\expo-notifications\\src\\NotificationsHandler.ts"],"sourcesContent":["import { EventEmitter, Subscription, CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport { Notification, NotificationBehavior } from './Notifications.types';\nimport NotificationsHandlerModule from './NotificationsHandlerModule';\n\n/**\n * @hidden\n */\nexport class NotificationTimeoutError extends CodedError {\n  info: { notification: Notification; id: string };\n  constructor(notificationId: string, notification: Notification) {\n    super('ERR_NOTIFICATION_TIMEOUT', `Notification handling timed out for ID ${notificationId}.`);\n    this.info = { id: notificationId, notification };\n  }\n}\n\n// @docsMissing\nexport type NotificationHandlingError = NotificationTimeoutError | Error;\n\nexport interface NotificationHandler {\n  /**\n   * A function accepting an incoming notification returning a `Promise` resolving to a behavior ([`NotificationBehavior`](#notificationbehavior))\n   * applicable to the notification\n   * @param notification An object representing the notification.\n   */\n  handleNotification: (notification: Notification) => Promise<NotificationBehavior>;\n  /**\n   * A function called whenever an incoming notification is handled successfully.\n   * @param notificationId Identifier of the notification.\n   */\n  handleSuccess?: (notificationId: string) => void;\n  /**\n   * A function called whenever handling of an incoming notification fails.\n   * @param notificationId Identifier of the notification.\n   * @param error An error which occurred in form of `NotificationHandlingError` object.\n   */\n  handleError?: (notificationId: string, error: NotificationHandlingError) => void;\n}\n\ntype HandleNotificationEvent = {\n  id: string;\n  notification: Notification;\n};\n\ntype HandleNotificationTimeoutEvent = HandleNotificationEvent;\n\n// Web uses SyntheticEventEmitter\nconst notificationEmitter = new EventEmitter(NotificationsHandlerModule);\n\nconst handleNotificationEventName = 'onHandleNotification';\nconst handleNotificationTimeoutEventName = 'onHandleNotificationTimeout';\n\nlet handleSubscription: Subscription | null = null;\nlet handleTimeoutSubscription: Subscription | null = null;\n\n/**\n * When a notification is received while the app is running, using this function you can set a callback that will decide\n * whether the notification should be shown to the user or not.\n *\n * When a notification is received, `handleNotification` is called with the incoming notification as an argument.\n * The function should respond with a behavior object within 3 seconds, otherwise, the notification will be discarded.\n * If the notification is handled successfully, `handleSuccess` is called with the identifier of the notification,\n * otherwise (or on timeout) `handleError` will be called.\n *\n * The default behavior when the handler is not set or does not respond in time is not to show the notification.\n * @param handler A single parameter which should be either `null` (if you want to clear the handler) or a [`NotificationHandler`](#notificationhandler) object.\n *\n * @example Implementing a notification handler that always shows the notification when it is received.\n * ```jsx\n * import * as Notifications from 'expo-notifications';\n *\n * Notifications.setNotificationHandler({\n *   handleNotification: async () => ({\n *     shouldShowAlert: true,\n *     shouldPlaySound: false,\n *     shouldSetBadge: false,\n *   }),\n * });\n * ```\n * @header inForeground\n */\nexport function setNotificationHandler(handler: NotificationHandler | null): void {\n  if (handleSubscription) {\n    handleSubscription.remove();\n    handleSubscription = null;\n  }\n  if (handleTimeoutSubscription) {\n    handleTimeoutSubscription.remove();\n    handleTimeoutSubscription = null;\n  }\n\n  if (handler) {\n    handleSubscription = notificationEmitter.addListener<HandleNotificationEvent>(\n      handleNotificationEventName,\n      async ({ id, notification }) => {\n        if (!NotificationsHandlerModule.handleNotificationAsync) {\n          handler.handleError?.(\n            id,\n            new UnavailabilityError('Notifications', 'handleNotificationAsync')\n          );\n          return;\n        }\n\n        try {\n          const behavior = await handler.handleNotification(notification);\n          await NotificationsHandlerModule.handleNotificationAsync(id, behavior);\n          handler.handleSuccess?.(id);\n        } catch (error) {\n          handler.handleError?.(id, error);\n        }\n      }\n    );\n\n    handleTimeoutSubscription = notificationEmitter.addListener<HandleNotificationTimeoutEvent>(\n      handleNotificationTimeoutEventName,\n      ({ id, notification }) =>\n        handler.handleError?.(id, new NotificationTimeoutError(id, notification))\n    );\n  }\n}\n"],"mappings":";;;;;;;;AAAA,SAASA,YAAY,EAAgBC,UAAU,EAAEC,mBAAmB,QAAQ,mBAAmB;AAG/F,OAAOC,0BAA0B;AAKjC,WAAaC,wBAAyB,aAAAC,WAAA;EAEpC,SAAAD,yBAAYE,cAAsB,EAAEC,YAA0B;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAL,wBAAA;IAC5DI,KAAA,GAAAE,UAAA,OAAAN,wBAAA,GAAM,0BAA0B,EAAE,0CAA0CE,cAAc,GAAG;IAC7FE,KAAA,CAAKG,IAAI,GAAG;MAAEC,EAAE,EAAEN,cAAc;MAAEC,YAAY,EAAZA;IAAY,CAAE;IAAC,OAAAC,KAAA;EACnD;EAACK,SAAA,CAAAT,wBAAA,EAAAC,WAAA;EAAA,OAAAS,YAAA,CAAAV,wBAAA;AAAA,EAL2CH,UAAU;AAuCxD,IAAMc,mBAAmB,GAAG,IAAIf,YAAY,CAACG,0BAA0B,CAAC;AAExE,IAAMa,2BAA2B,GAAG,sBAAsB;AAC1D,IAAMC,kCAAkC,GAAG,6BAA6B;AAExE,IAAIC,kBAAkB,GAAwB,IAAI;AAClD,IAAIC,yBAAyB,GAAwB,IAAI;AA4BzD,OAAM,SAAUC,sBAAsBA,CAACC,OAAmC;EACxE,IAAIH,kBAAkB,EAAE;IACtBA,kBAAkB,CAACI,MAAM,EAAE;IAC3BJ,kBAAkB,GAAG,IAAI;;EAE3B,IAAIC,yBAAyB,EAAE;IAC7BA,yBAAyB,CAACG,MAAM,EAAE;IAClCH,yBAAyB,GAAG,IAAI;;EAGlC,IAAIE,OAAO,EAAE;IACXH,kBAAkB,GAAGH,mBAAmB,CAACQ,WAAW,CAClDP,2BAA2B;MAAA,IAAAQ,KAAA,GAAAC,iBAAA,CAC3B,WAAAC,IAAA,EAA+B;QAAA,IAAtBd,EAAE,GAAAc,IAAA,CAAFd,EAAE;UAAEL,YAAY,GAAAmB,IAAA,CAAZnB,YAAY;QACvB,IAAI,CAACJ,0BAA0B,CAACwB,uBAAuB,EAAE;UACvDN,OAAO,CAACO,WAAW,oBAAnBP,OAAO,CAACO,WAAW,CACjBhB,EAAE,EACF,IAAIV,mBAAmB,CAAC,eAAe,EAAE,yBAAyB,CAAC,CACpE;UACD;;QAGF,IAAI;UACF,IAAM2B,QAAQ,SAASR,OAAO,CAACS,kBAAkB,CAACvB,YAAY,CAAC;UAC/D,MAAMJ,0BAA0B,CAACwB,uBAAuB,CAACf,EAAE,EAAEiB,QAAQ,CAAC;UACtER,OAAO,CAACU,aAAa,oBAArBV,OAAO,CAACU,aAAa,CAAGnB,EAAE,CAAC;SAC5B,CAAC,OAAOoB,KAAK,EAAE;UACdX,OAAO,CAACO,WAAW,oBAAnBP,OAAO,CAACO,WAAW,CAAGhB,EAAE,EAAEoB,KAAK,CAAC;;MAEpC,CAAC;MAAA,iBAAAC,EAAA;QAAA,OAAAT,KAAA,CAAAU,KAAA,OAAAC,SAAA;MAAA;IAAA,IACF;IAEDhB,yBAAyB,GAAGJ,mBAAmB,CAACQ,WAAW,CACzDN,kCAAkC,EAClC,UAAAmB,KAAA;MAAA,IAAGxB,EAAE,GAAAwB,KAAA,CAAFxB,EAAE;QAAEL,YAAY,GAAA6B,KAAA,CAAZ7B,YAAY;MAAA,OACjBc,OAAO,CAACO,WAAW,oBAAnBP,OAAO,CAACO,WAAW,CAAGhB,EAAE,EAAE,IAAIR,wBAAwB,CAACQ,EAAE,EAAEL,YAAY,CAAC,CAAC;IAAA,EAC5E;;AAEL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}