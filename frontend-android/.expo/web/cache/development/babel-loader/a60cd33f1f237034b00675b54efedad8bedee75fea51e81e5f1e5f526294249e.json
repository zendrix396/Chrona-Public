{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar api = axios.create({\n  baseURL: 'https://chrona-backend.onrender.com',\n  timeout: 60000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nvar ensureApiAwake = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      console.log('Checking if API is awake...');\n      yield api.get('/', {\n        timeout: 5000\n      });\n      console.log('API is already awake');\n      return true;\n    } catch (error) {\n      console.log('API may be asleep, attempting to wake it up...');\n      try {\n        yield api.get('/', {\n          timeout: 30000\n        });\n        console.log('Successfully woke up the API');\n        return true;\n      } catch (error) {\n        console.error('Failed to wake up API:', error);\n        return false;\n      }\n    }\n  });\n  return function ensureApiAwake() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var TaskService = {\n  fetchTasks: function () {\n    var _fetchTasks = _asyncToGenerator(function* () {\n      try {\n        yield ensureApiAwake();\n        console.log('Fetching tasks...');\n        var response = yield api.get('/tasks/');\n        console.log(`Fetched ${response.data.length} tasks`);\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching tasks:', error);\n        throw error;\n      }\n    });\n    function fetchTasks() {\n      return _fetchTasks.apply(this, arguments);\n    }\n    return fetchTasks;\n  }(),\n  createTask: function () {\n    var _createTask = _asyncToGenerator(function* (name, description) {\n      try {\n        yield ensureApiAwake();\n        var response = yield api.post('/tasks/', {\n          name: name,\n          description: description || null,\n          status: 'active'\n        });\n        return response.data;\n      } catch (error) {\n        console.error('Error creating task:', error);\n        throw error;\n      }\n    });\n    function createTask(_x, _x2) {\n      return _createTask.apply(this, arguments);\n    }\n    return createTask;\n  }()\n};\nexport var TimeEntryService = {\n  createTimeEntry: function () {\n    var _createTimeEntry = _asyncToGenerator(function* (taskId) {\n      try {\n        yield ensureApiAwake();\n        var response = yield api.post('/time-entries/', {\n          task_id: taskId,\n          start_time: new Date().toISOString().slice(0, 19),\n          end_time: null,\n          duration: null,\n          notes: null\n        });\n        yield AsyncStorage.setItem('current_entry_id', response.data.id.toString());\n        yield AsyncStorage.setItem('current_task_id', taskId.toString());\n        yield AsyncStorage.setItem('start_time', new Date().toISOString());\n        return response.data;\n      } catch (error) {\n        console.error('Error creating time entry:', error);\n        throw error;\n      }\n    });\n    function createTimeEntry(_x3) {\n      return _createTimeEntry.apply(this, arguments);\n    }\n    return createTimeEntry;\n  }(),\n  updateTimeEntry: function () {\n    var _updateTimeEntry = _asyncToGenerator(function* (entryId, durationMinutes) {\n      try {\n        yield ensureApiAwake();\n        var response = yield api.put(`/time-entries/${entryId}`, {\n          end_time: new Date().toISOString().slice(0, 19),\n          duration: durationMinutes,\n          notes: null\n        });\n        yield AsyncStorage.removeItem('current_entry_id');\n        yield AsyncStorage.removeItem('current_task_id');\n        yield AsyncStorage.removeItem('start_time');\n        return response.data;\n      } catch (error) {\n        console.error('Error updating time entry:', error);\n        throw error;\n      }\n    });\n    function updateTimeEntry(_x4, _x5) {\n      return _updateTimeEntry.apply(this, arguments);\n    }\n    return updateTimeEntry;\n  }(),\n  getTimeEntries: function () {\n    var _getTimeEntries = _asyncToGenerator(function* () {\n      try {\n        yield ensureApiAwake();\n        var response = yield api.get('/time-entries/');\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching time entries:', error);\n        throw error;\n      }\n    });\n    function getTimeEntries() {\n      return _getTimeEntries.apply(this, arguments);\n    }\n    return getTimeEntries;\n  }(),\n  checkForRunningTimer: function () {\n    var _checkForRunningTimer = _asyncToGenerator(function* () {\n      try {\n        var entryId = yield AsyncStorage.getItem('current_entry_id');\n        var taskId = yield AsyncStorage.getItem('current_task_id');\n        var startTimeStr = yield AsyncStorage.getItem('start_time');\n        if (entryId && taskId && startTimeStr) {\n          return {\n            isRunning: true,\n            entryId: parseInt(entryId),\n            taskId: parseInt(taskId),\n            startTime: new Date(startTimeStr)\n          };\n        }\n        return {\n          isRunning: false\n        };\n      } catch (error) {\n        console.error('Error checking for running timer:', error);\n        return {\n          isRunning: false\n        };\n      }\n    });\n    function checkForRunningTimer() {\n      return _checkForRunningTimer.apply(this, arguments);\n    }\n    return checkForRunningTimer;\n  }()\n};\nexport default api;","map":{"version":3,"names":["axios","AsyncStorage","api","create","baseURL","timeout","headers","ensureApiAwake","_ref","_asyncToGenerator","console","log","get","error","apply","arguments","TaskService","fetchTasks","_fetchTasks","response","data","length","createTask","_createTask","name","description","post","status","_x","_x2","TimeEntryService","createTimeEntry","_createTimeEntry","taskId","task_id","start_time","Date","toISOString","slice","end_time","duration","notes","setItem","id","toString","_x3","updateTimeEntry","_updateTimeEntry","entryId","durationMinutes","put","removeItem","_x4","_x5","getTimeEntries","_getTimeEntries","checkForRunningTimer","_checkForRunningTimer","getItem","startTimeStr","isRunning","parseInt","startTime"],"sources":["C:/Users/shikhar/Documents/Programming/Dev/Utility/frontend-android/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { Task, TimeEntry } from '../types';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: 'https://chrona-backend.onrender.com',\r\n  timeout: 60000, // Increased from 15000 to 60000 (60 seconds) to account for cold starts\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Helper function to check if API is awake and trigger a wake-up if needed\r\nconst ensureApiAwake = async () => {\r\n  try {\r\n    console.log('Checking if API is awake...');\r\n    await api.get('/', { timeout: 5000 });\r\n    console.log('API is already awake');\r\n    return true;\r\n  } catch (error) {\r\n    console.log('API may be asleep, attempting to wake it up...');\r\n    try {\r\n      // On failure, make a second request with longer timeout to wake the service\r\n      await api.get('/', { timeout: 30000 });\r\n      console.log('Successfully woke up the API');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Failed to wake up API:', error);\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\n// API service for tasks\r\nexport const TaskService = {\r\n  async fetchTasks(): Promise<Task[]> {\r\n    try {\r\n      // First ensure the API is awake\r\n      await ensureApiAwake();\r\n      \r\n      console.log('Fetching tasks...');\r\n      const response = await api.get('/tasks/');\r\n      console.log(`Fetched ${response.data.length} tasks`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching tasks:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async createTask(name: string, description?: string): Promise<Task> {\r\n    try {\r\n      // First ensure the API is awake\r\n      await ensureApiAwake();\r\n      \r\n      const response = await api.post('/tasks/', {\r\n        name,\r\n        description: description || null,\r\n        status: 'active',\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating task:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\n// API service for time entries\r\nexport const TimeEntryService = {\r\n  async createTimeEntry(taskId: number): Promise<TimeEntry> {\r\n    try {\r\n      // First ensure the API is awake\r\n      await ensureApiAwake();\r\n      \r\n      const response = await api.post('/time-entries/', {\r\n        task_id: taskId,\r\n        start_time: new Date().toISOString().slice(0, 19), // format: YYYY-MM-DDTHH:MM:SS\r\n        end_time: null,\r\n        duration: null,\r\n        notes: null,\r\n      });\r\n      \r\n      // Store entry ID for recovery if app crashes\r\n      await AsyncStorage.setItem('current_entry_id', response.data.id.toString());\r\n      await AsyncStorage.setItem('current_task_id', taskId.toString());\r\n      await AsyncStorage.setItem('start_time', new Date().toISOString());\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating time entry:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async updateTimeEntry(entryId: number, durationMinutes: number): Promise<TimeEntry> {\r\n    try {\r\n      // First ensure the API is awake\r\n      await ensureApiAwake();\r\n      \r\n      const response = await api.put(`/time-entries/${entryId}`, {\r\n        end_time: new Date().toISOString().slice(0, 19), // format: YYYY-MM-DDTHH:MM:SS\r\n        duration: durationMinutes,\r\n        notes: null,\r\n      });\r\n      \r\n      // Clear stored entry data\r\n      await AsyncStorage.removeItem('current_entry_id');\r\n      await AsyncStorage.removeItem('current_task_id');\r\n      await AsyncStorage.removeItem('start_time');\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating time entry:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getTimeEntries(): Promise<TimeEntry[]> {\r\n    try {\r\n      // First ensure the API is awake\r\n      await ensureApiAwake();\r\n      \r\n      const response = await api.get('/time-entries/');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching time entries:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Check if we have a running timer (for app restart recovery)\r\n  async checkForRunningTimer(): Promise<{ isRunning: boolean; entryId?: number; taskId?: number; startTime?: Date }> {\r\n    try {\r\n      const entryId = await AsyncStorage.getItem('current_entry_id');\r\n      const taskId = await AsyncStorage.getItem('current_task_id');\r\n      const startTimeStr = await AsyncStorage.getItem('start_time');\r\n      \r\n      if (entryId && taskId && startTimeStr) {\r\n        return {\r\n          isRunning: true,\r\n          entryId: parseInt(entryId),\r\n          taskId: parseInt(taskId),\r\n          startTime: new Date(startTimeStr),\r\n        };\r\n      }\r\n      \r\n      return { isRunning: false };\r\n    } catch (error) {\r\n      console.error('Error checking for running timer:', error);\r\n      return { isRunning: false };\r\n    }\r\n  },\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}